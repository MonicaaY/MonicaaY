{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1po2Rd65fGo65nn3Cb0PmHIX-8Db2Xk9y",
      "authorship_tag": "ABX9TyPo9FP6WregounAFdjWmyAa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MonicaaY/MonicaaY/blob/main/Formula_1%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_6PwIvs9hro1",
        "outputId": "858e4659-e084-4249-dfdb-77710fece363"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting fastf1\n",
            "  Downloading fastf1-3.3.8-py3-none-any.whl (130 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.4/130.4 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: matplotlib<4.0.0,>=3.5.1 in /usr/local/lib/python3.10/dist-packages (from fastf1) (3.7.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.21.5 in /usr/local/lib/python3.10/dist-packages (from fastf1) (1.25.2)\n",
            "Requirement already satisfied: pandas<3.0.0,>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from fastf1) (2.0.3)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from fastf1) (2.8.2)\n",
            "Collecting requests-cache>=1.0.0 (from fastf1)\n",
            "  Downloading requests_cache-1.2.1-py3-none-any.whl (61 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.4/61.4 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests>=2.28.1 in /usr/local/lib/python3.10/dist-packages (from fastf1) (2.31.0)\n",
            "Requirement already satisfied: scipy<2.0.0,>=1.7.3 in /usr/local/lib/python3.10/dist-packages (from fastf1) (1.11.4)\n",
            "Collecting thefuzz (from fastf1)\n",
            "  Downloading thefuzz-0.22.1-py3-none-any.whl (8.2 kB)\n",
            "Collecting timple>=0.1.6 (from fastf1)\n",
            "  Downloading timple-0.1.8-py3-none-any.whl (17 kB)\n",
            "Collecting websockets>=10.3 (from fastf1)\n",
            "  Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (130 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.2/130.2 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4.0.0,>=3.5.1->fastf1) (3.1.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0.0,>=1.4.1->fastf1) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0.0,>=1.4.1->fastf1) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->fastf1) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.28.1->fastf1) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.28.1->fastf1) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.28.1->fastf1) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.28.1->fastf1) (2024.6.2)\n",
            "Requirement already satisfied: attrs>=21.2 in /usr/local/lib/python3.10/dist-packages (from requests-cache>=1.0.0->fastf1) (23.2.0)\n",
            "Collecting cattrs>=22.2 (from requests-cache>=1.0.0->fastf1)\n",
            "  Downloading cattrs-23.2.3-py3-none-any.whl (57 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.5/57.5 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-cache>=1.0.0->fastf1) (4.2.2)\n",
            "Collecting url-normalize>=1.4 (from requests-cache>=1.0.0->fastf1)\n",
            "  Downloading url_normalize-1.4.3-py2.py3-none-any.whl (6.8 kB)\n",
            "Collecting rapidfuzz<4.0.0,>=3.0.0 (from thefuzz->fastf1)\n",
            "  Downloading rapidfuzz-3.9.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.4/3.4 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: exceptiongroup>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from cattrs>=22.2->requests-cache>=1.0.0->fastf1) (1.2.1)\n",
            "Requirement already satisfied: typing-extensions!=4.6.3,>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from cattrs>=22.2->requests-cache>=1.0.0->fastf1) (4.12.2)\n",
            "Installing collected packages: websockets, url-normalize, rapidfuzz, cattrs, thefuzz, requests-cache, timple, fastf1\n",
            "Successfully installed cattrs-23.2.3 fastf1-3.3.8 rapidfuzz-3.9.4 requests-cache-1.2.1 thefuzz-0.22.1 timple-0.1.8 url-normalize-1.4.3 websockets-12.0\n"
          ]
        }
      ],
      "source": [
        "!pip install fastf1"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "import json\n",
        "\n",
        "response = urlopen('https://api.openf1.org/v1/car_data?driver_number=55&session_key=9159&speed>=315')\n",
        "data = json.loads(response.read().decode('utf-8'))\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oImlHx-oh8dR",
        "outputId": "c82b59a5-3c21-4968-b228-430bc98df608"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'driver_number': 55, 'rpm': 11141, 'speed': 315, 'n_gear': 8, 'throttle': 99, 'brake': 0, 'drs': 12, 'date': '2023-09-15T13:08:19.923000+00:00', 'session_key': 9159, 'meeting_key': 1219}, {'driver_number': 55, 'rpm': 11023, 'speed': 315, 'n_gear': 8, 'throttle': 57, 'brake': 100, 'drs': 8, 'date': '2023-09-15T13:35:41.808000+00:00', 'session_key': 9159, 'meeting_key': 1219}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "import json\n",
        "\n",
        "response = urlopen('https://api.openf1.org/v1/drivers?driver_number=1&session_key=9158')\n",
        "data = json.loads(response.read().decode('utf-8'))\n",
        "print(data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DE87FY1iObC",
        "outputId": "4bf4759e-c97b-4228-e6d7-7edb0351a049"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'driver_number': 1, 'broadcast_name': 'M VERSTAPPEN', 'full_name': 'Max VERSTAPPEN', 'name_acronym': 'VER', 'team_name': 'Red Bull Racing', 'team_colour': '3671C6', 'first_name': 'Max', 'last_name': 'Verstappen', 'headshot_url': 'https://www.formula1.com/content/dam/fom-website/drivers/M/MAXVER01_Max_Verstappen/maxver01.png.transform/1col/image.png', 'country_code': 'NED', 'session_key': 9158, 'meeting_key': 1219}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "import json\n",
        "\n",
        "response = urlopen('https://api.openf1.org/v1/laps?session_key=9161&driver_number=63&lap_number=8')\n",
        "data = json.loads(response.read().decode('utf-8'))\n",
        "print(data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-kLW0F2miXJl",
        "outputId": "558feece-200a-4cd3-ef1e-edb6947d0ea0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'meeting_key': 1219, 'session_key': 9161, 'driver_number': 63, 'i1_speed': 307, 'i2_speed': 277, 'st_speed': 298, 'date_start': '2023-09-16T13:59:07.606000+00:00', 'lap_duration': 91.743, 'is_pit_out_lap': False, 'duration_sector_1': 26.966, 'duration_sector_2': 38.657, 'duration_sector_3': 26.12, 'segments_sector_1': [2049, 2049, 2049, 2051, 2049, 2051, 2049, 2049], 'segments_sector_2': [2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049], 'segments_sector_3': [2048, 2048, 2048, 2048, 2048, 2064, 2064, 2064], 'lap_number': 8}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "NVE2hBvikJPx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "circuits=pd.read_csv('/content/circuits.csv')"
      ],
      "metadata": {
        "id": "cEgX2F63kfxq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "circuits.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hBD5hp47kkx8",
        "outputId": "5a73f064-ccf2-453f-a5e2-c3f5fe34752e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   circuitId   circuitRef                            name      location  \\\n",
              "0          1  albert_park  Albert Park Grand Prix Circuit     Melbourne   \n",
              "1          2       sepang    Sepang International Circuit  Kuala Lumpur   \n",
              "2          3      bahrain   Bahrain International Circuit        Sakhir   \n",
              "3          4    catalunya  Circuit de Barcelona-Catalunya      Montmeló   \n",
              "4          5     istanbul                   Istanbul Park      Istanbul   \n",
              "\n",
              "     country       lat        lng  alt  \\\n",
              "0  Australia -37.84970  144.96800   10   \n",
              "1   Malaysia   2.76083  101.73800   18   \n",
              "2    Bahrain  26.03250   50.51060    7   \n",
              "3      Spain  41.57000    2.26111  109   \n",
              "4     Turkey  40.95170   29.40500  130   \n",
              "\n",
              "                                                 url  \n",
              "0  http://en.wikipedia.org/wiki/Melbourne_Grand_P...  \n",
              "1  http://en.wikipedia.org/wiki/Sepang_Internatio...  \n",
              "2  http://en.wikipedia.org/wiki/Bahrain_Internati...  \n",
              "3  http://en.wikipedia.org/wiki/Circuit_de_Barcel...  \n",
              "4         http://en.wikipedia.org/wiki/Istanbul_Park  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-659f76c5-7fbf-4706-bbd0-2cbf72c743b1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>circuitId</th>\n",
              "      <th>circuitRef</th>\n",
              "      <th>name</th>\n",
              "      <th>location</th>\n",
              "      <th>country</th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>alt</th>\n",
              "      <th>url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>albert_park</td>\n",
              "      <td>Albert Park Grand Prix Circuit</td>\n",
              "      <td>Melbourne</td>\n",
              "      <td>Australia</td>\n",
              "      <td>-37.84970</td>\n",
              "      <td>144.96800</td>\n",
              "      <td>10</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Melbourne_Grand_P...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>sepang</td>\n",
              "      <td>Sepang International Circuit</td>\n",
              "      <td>Kuala Lumpur</td>\n",
              "      <td>Malaysia</td>\n",
              "      <td>2.76083</td>\n",
              "      <td>101.73800</td>\n",
              "      <td>18</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Sepang_Internatio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>bahrain</td>\n",
              "      <td>Bahrain International Circuit</td>\n",
              "      <td>Sakhir</td>\n",
              "      <td>Bahrain</td>\n",
              "      <td>26.03250</td>\n",
              "      <td>50.51060</td>\n",
              "      <td>7</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Bahrain_Internati...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>catalunya</td>\n",
              "      <td>Circuit de Barcelona-Catalunya</td>\n",
              "      <td>Montmeló</td>\n",
              "      <td>Spain</td>\n",
              "      <td>41.57000</td>\n",
              "      <td>2.26111</td>\n",
              "      <td>109</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Circuit_de_Barcel...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>istanbul</td>\n",
              "      <td>Istanbul Park</td>\n",
              "      <td>Istanbul</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>40.95170</td>\n",
              "      <td>29.40500</td>\n",
              "      <td>130</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Istanbul_Park</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-659f76c5-7fbf-4706-bbd0-2cbf72c743b1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-659f76c5-7fbf-4706-bbd0-2cbf72c743b1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-659f76c5-7fbf-4706-bbd0-2cbf72c743b1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-998f548f-2f21-4ef7-b507-686e0a1a652b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-998f548f-2f21-4ef7-b507-686e0a1a652b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-998f548f-2f21-4ef7-b507-686e0a1a652b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "circuits",
              "summary": "{\n  \"name\": \"circuits\",\n  \"rows\": 77,\n  \"fields\": [\n    {\n      \"column\": \"circuitId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 1,\n        \"max\": 80,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          5,\n          36,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"circuitRef\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 77,\n        \"samples\": [\n          \"istanbul\",\n          \"jacarepagua\",\n          \"hungaroring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 77,\n        \"samples\": [\n          \"Istanbul Park\",\n          \"Aut\\u00f3dromo Internacional Nelson Piquet\",\n          \"Hungaroring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 75,\n        \"samples\": [\n          \"Istanbul\",\n          \"Pescara\",\n          \"Budapest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"Sweden\",\n          \"Singapore\",\n          \"Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.808865758428386,\n        \"min\": -37.8497,\n        \"max\": 57.2653,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          40.9517,\n          -22.9756,\n          47.5789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lng\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65.51695070331965,\n        \"min\": -118.189,\n        \"max\": 144.968,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          29.405,\n          -43.395,\n          19.2486\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"158\",\n          \"2\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"url\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 77,\n        \"samples\": [\n          \"http://en.wikipedia.org/wiki/Istanbul_Park\",\n          \"http://en.wikipedia.org/wiki/Aut%C3%B3dromo_Internacional_Nelson_Piquet\",\n          \"http://en.wikipedia.org/wiki/Hungaroring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "constructor_results=pd.read_csv('/content/constructor_results.csv')"
      ],
      "metadata": {
        "id": "vU7dl-C4knuQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "constructor_results.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "IyYv34c2krup",
        "outputId": "c69a0431-d82f-4a57-94ea-319caffff981"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   constructorResultsId  raceId  constructorId  points status\n",
              "0                     1      18              1    14.0     \\N\n",
              "1                     2      18              2     8.0     \\N\n",
              "2                     3      18              3     9.0     \\N\n",
              "3                     4      18              4     5.0     \\N\n",
              "4                     5      18              5     2.0     \\N"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9d8915c-88ed-46f7-b17c-5243746751d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>constructorResultsId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>points</th>\n",
              "      <th>status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>9.0</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9d8915c-88ed-46f7-b17c-5243746751d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9d8915c-88ed-46f7-b17c-5243746751d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9d8915c-88ed-46f7-b17c-5243746751d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e269086c-969a-4f20-b1db-e6407fc833b0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e269086c-969a-4f20-b1db-e6407fc833b0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e269086c-969a-4f20-b1db-e6407fc833b0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "constructor_results",
              "summary": "{\n  \"name\": \"constructor_results\",\n  \"rows\": 12290,\n  \"fields\": [\n    {\n      \"column\": \"constructorResultsId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5561,\n        \"min\": 1,\n        \"max\": 16789,\n        \"num_unique_values\": 12290,\n        \"samples\": [\n          4465,\n          2168,\n          2883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 302,\n        \"min\": 1,\n        \"max\": 1110,\n        \"num_unique_values\": 1028,\n        \"samples\": [\n          449,\n          554,\n          409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 175,\n        \"samples\": [\n          84,\n          179,\n          93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.555135467560509,\n        \"min\": 0.0,\n        \"max\": 66.0,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          14.0,\n          1.0,\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"D\",\n          \"\\\\N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "constructor_standings=pd.read_csv('/content/constructor_standings.csv')"
      ],
      "metadata": {
        "id": "BbnltJBDk5D6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "constructor_standings.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "DJQJWYYblAMC",
        "outputId": "45e30660-0cb6-4f96-8109-89977f787813"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   constructorStandingsId  raceId  constructorId  points  position  \\\n",
              "0                       1      18              1    14.0         1   \n",
              "1                       2      18              2     8.0         3   \n",
              "2                       3      18              3     9.0         2   \n",
              "3                       4      18              4     5.0         4   \n",
              "4                       5      18              5     2.0         5   \n",
              "\n",
              "  positionText  wins  \n",
              "0            1     1  \n",
              "1            3     0  \n",
              "2            2     0  \n",
              "3            4     0  \n",
              "4            5     0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ffa63198-a5d3-480b-be5f-f004e22cb9c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>constructorStandingsId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>points</th>\n",
              "      <th>position</th>\n",
              "      <th>positionText</th>\n",
              "      <th>wins</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffa63198-a5d3-480b-be5f-f004e22cb9c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ffa63198-a5d3-480b-be5f-f004e22cb9c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ffa63198-a5d3-480b-be5f-f004e22cb9c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5ebbaada-5222-4736-9feb-d53f6a81cd72\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ebbaada-5222-4736-9feb-d53f6a81cd72')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5ebbaada-5222-4736-9feb-d53f6a81cd72 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "constructor_standings",
              "summary": "{\n  \"name\": \"constructor_standings\",\n  \"rows\": 13051,\n  \"fields\": [\n    {\n      \"column\": \"constructorStandingsId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8773,\n        \"min\": 1,\n        \"max\": 28572,\n        \"num_unique_values\": 13051,\n        \"samples\": [\n          26176,\n          5284,\n          5039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 296,\n        \"min\": 1,\n        \"max\": 1110,\n        \"num_unique_values\": 1027,\n        \"samples\": [\n          450,\n          554,\n          409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          78,\n          210,\n          103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.22772599769696,\n        \"min\": 0.0,\n        \"max\": 765.0,\n        \"num_unique_values\": 541,\n        \"samples\": [\n          68.5,\n          80.0,\n          287.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          1,\n          14,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionText\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"15\",\n          \"10\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wins\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 19,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1,\n          18,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "constructors=pd.read_csv('/content/constructors.csv')"
      ],
      "metadata": {
        "id": "tBPi9qMmlEC4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "constructors.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Hs_UPYSplMnN",
        "outputId": "314e7d48-b7fc-45df-ae80-ccb9ae53cc9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   constructorId constructorRef        name nationality  \\\n",
              "0              1        mclaren     McLaren     British   \n",
              "1              2     bmw_sauber  BMW Sauber      German   \n",
              "2              3       williams    Williams     British   \n",
              "3              4        renault     Renault      French   \n",
              "4              5     toro_rosso  Toro Rosso     Italian   \n",
              "\n",
              "                                                 url  \n",
              "0               http://en.wikipedia.org/wiki/McLaren  \n",
              "1            http://en.wikipedia.org/wiki/BMW_Sauber  \n",
              "2  http://en.wikipedia.org/wiki/Williams_Grand_Pr...  \n",
              "3  http://en.wikipedia.org/wiki/Renault_in_Formul...  \n",
              "4   http://en.wikipedia.org/wiki/Scuderia_Toro_Rosso  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59037851-b3a8-4f1e-a233-087629bee145\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>constructorId</th>\n",
              "      <th>constructorRef</th>\n",
              "      <th>name</th>\n",
              "      <th>nationality</th>\n",
              "      <th>url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>mclaren</td>\n",
              "      <td>McLaren</td>\n",
              "      <td>British</td>\n",
              "      <td>http://en.wikipedia.org/wiki/McLaren</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>bmw_sauber</td>\n",
              "      <td>BMW Sauber</td>\n",
              "      <td>German</td>\n",
              "      <td>http://en.wikipedia.org/wiki/BMW_Sauber</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>williams</td>\n",
              "      <td>Williams</td>\n",
              "      <td>British</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Williams_Grand_Pr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>renault</td>\n",
              "      <td>Renault</td>\n",
              "      <td>French</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Renault_in_Formul...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>toro_rosso</td>\n",
              "      <td>Toro Rosso</td>\n",
              "      <td>Italian</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Scuderia_Toro_Rosso</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59037851-b3a8-4f1e-a233-087629bee145')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59037851-b3a8-4f1e-a233-087629bee145 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59037851-b3a8-4f1e-a233-087629bee145');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c171b535-f5bc-4652-b83a-6c6c82bfb653\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c171b535-f5bc-4652-b83a-6c6c82bfb653')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c171b535-f5bc-4652-b83a-6c6c82bfb653 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "constructors",
              "summary": "{\n  \"name\": \"constructors\",\n  \"rows\": 211,\n  \"fields\": [\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 211,\n        \"samples\": [\n          31,\n          176,\n          142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorRef\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 211,\n        \"samples\": [\n          \"simtek\",\n          \"lotus-brm\",\n          \"turner\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 211,\n        \"samples\": [\n          \"Simtek\",\n          \"Lotus-BRM\",\n          \"Turner\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nationality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Russian\",\n          \"Australian\",\n          \"British\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"url\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 174,\n        \"samples\": [\n          \"http://en.wikipedia.org/wiki/Rae_(motorsport)\",\n          \"http://en.wikipedia.org/wiki/Alex_von_Falkenhausen_Motorenbau\",\n          \"http://en.wikipedia.org/wiki/Behra-Porsche\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "driver_standings=pd.read_csv('/content/driver_standings.csv')"
      ],
      "metadata": {
        "id": "FYe4wlYslTWb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "driver_standings.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "QmdaQwT1lcp7",
        "outputId": "a5f9a30d-24d9-40ed-cb86-d660ce34b63f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   driverStandingsId  raceId  driverId  points  position positionText  wins\n",
              "0                  1      18         1    10.0         1            1     1\n",
              "1                  2      18         2     8.0         2            2     0\n",
              "2                  3      18         3     6.0         3            3     0\n",
              "3                  4      18         4     5.0         4            4     0\n",
              "4                  5      18         5     4.0         5            5     0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-96dd453a-2670-4b65-a238-e90459f1a3a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>driverStandingsId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>points</th>\n",
              "      <th>position</th>\n",
              "      <th>positionText</th>\n",
              "      <th>wins</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96dd453a-2670-4b65-a238-e90459f1a3a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-96dd453a-2670-4b65-a238-e90459f1a3a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-96dd453a-2670-4b65-a238-e90459f1a3a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1585852d-3a3f-4148-8551-3771b6fe070b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1585852d-3a3f-4148-8551-3771b6fe070b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1585852d-3a3f-4148-8551-3771b6fe070b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "driver_standings",
              "summary": "{\n  \"name\": \"driver_standings\",\n  \"rows\": 34124,\n  \"fields\": [\n    {\n      \"column\": \"driverStandingsId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21729,\n        \"min\": 1,\n        \"max\": 72187,\n        \"num_unique_values\": 34124,\n        \"samples\": [\n          58564,\n          10861,\n          70020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 284,\n        \"min\": 1,\n        \"max\": 1110,\n        \"num_unique_values\": 1091,\n        \"samples\": [\n          853,\n          952,\n          1105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 267,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 850,\n        \"samples\": [\n          527,\n          367,\n          120\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.59970942274136,\n        \"min\": 0.0,\n        \"max\": 454.0,\n        \"num_unique_values\": 418,\n        \"samples\": [\n          288.0,\n          170.0,\n          275.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 1,\n        \"max\": 108,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          78,\n          11,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionText\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 109,\n        \"samples\": [\n          \"78\",\n          \"11\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wins\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 15,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          1,\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drivers=pd.read_csv('/content/drivers.csv')"
      ],
      "metadata": {
        "id": "UiyYgHSpley3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "drivers.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YK8W7BJuljpr",
        "outputId": "f9ccc8bd-5f17-49db-d168-56646e0beec6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   driverId   driverRef number code  forename     surname         dob  \\\n",
              "0         1    hamilton     44  HAM     Lewis    Hamilton  1985-01-07   \n",
              "1         2    heidfeld     \\N  HEI      Nick    Heidfeld  1977-05-10   \n",
              "2         3     rosberg      6  ROS      Nico     Rosberg  1985-06-27   \n",
              "3         4      alonso     14  ALO  Fernando      Alonso  1981-07-29   \n",
              "4         5  kovalainen     \\N  KOV    Heikki  Kovalainen  1981-10-19   \n",
              "\n",
              "  nationality                                             url  \n",
              "0     British     http://en.wikipedia.org/wiki/Lewis_Hamilton  \n",
              "1      German      http://en.wikipedia.org/wiki/Nick_Heidfeld  \n",
              "2      German       http://en.wikipedia.org/wiki/Nico_Rosberg  \n",
              "3     Spanish    http://en.wikipedia.org/wiki/Fernando_Alonso  \n",
              "4     Finnish  http://en.wikipedia.org/wiki/Heikki_Kovalainen  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22de0aca-fcc7-43a7-aa75-b255dd846e03\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>driverId</th>\n",
              "      <th>driverRef</th>\n",
              "      <th>number</th>\n",
              "      <th>code</th>\n",
              "      <th>forename</th>\n",
              "      <th>surname</th>\n",
              "      <th>dob</th>\n",
              "      <th>nationality</th>\n",
              "      <th>url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>hamilton</td>\n",
              "      <td>44</td>\n",
              "      <td>HAM</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>1985-01-07</td>\n",
              "      <td>British</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Lewis_Hamilton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>heidfeld</td>\n",
              "      <td>\\N</td>\n",
              "      <td>HEI</td>\n",
              "      <td>Nick</td>\n",
              "      <td>Heidfeld</td>\n",
              "      <td>1977-05-10</td>\n",
              "      <td>German</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Nick_Heidfeld</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>rosberg</td>\n",
              "      <td>6</td>\n",
              "      <td>ROS</td>\n",
              "      <td>Nico</td>\n",
              "      <td>Rosberg</td>\n",
              "      <td>1985-06-27</td>\n",
              "      <td>German</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Nico_Rosberg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>alonso</td>\n",
              "      <td>14</td>\n",
              "      <td>ALO</td>\n",
              "      <td>Fernando</td>\n",
              "      <td>Alonso</td>\n",
              "      <td>1981-07-29</td>\n",
              "      <td>Spanish</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Fernando_Alonso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>kovalainen</td>\n",
              "      <td>\\N</td>\n",
              "      <td>KOV</td>\n",
              "      <td>Heikki</td>\n",
              "      <td>Kovalainen</td>\n",
              "      <td>1981-10-19</td>\n",
              "      <td>Finnish</td>\n",
              "      <td>http://en.wikipedia.org/wiki/Heikki_Kovalainen</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22de0aca-fcc7-43a7-aa75-b255dd846e03')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22de0aca-fcc7-43a7-aa75-b255dd846e03 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22de0aca-fcc7-43a7-aa75-b255dd846e03');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9348e238-f84b-4ae9-9e4d-5bad4c47a671\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9348e238-f84b-4ae9-9e4d-5bad4c47a671')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9348e238-f84b-4ae9-9e4d-5bad4c47a671 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "drivers",
              "summary": "{\n  \"name\": \"drivers\",\n  \"rows\": 857,\n  \"fields\": [\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 247,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 857,\n        \"samples\": [\n          712,\n          603,\n          121\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverRef\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 857,\n        \"samples\": [\n          \"heeks\",\n          \"guelfi\",\n          \"andretti\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"23\",\n          \"28\",\n          \"33\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 95,\n        \"samples\": [\n          \"LOT\",\n          \"SCH\",\n          \"SAI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"forename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 476,\n        \"samples\": [\n          \"Lando\",\n          \"Yuji\",\n          \"Jonathan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"surname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 798,\n        \"samples\": [\n          \"Montgomerie-Charrington\",\n          \"Krause\",\n          \"Herbert\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dob\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 839,\n        \"samples\": [\n          \"1956-02-05\",\n          \"1995-08-27\",\n          \"1963-05-29\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nationality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"Monegasque\",\n          \"Colombian\",\n          \"Italian\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"url\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 857,\n        \"samples\": [\n          \"http://en.wikipedia.org/wiki/Willi_Heeks\",\n          \"http://en.wikipedia.org/wiki/Andr%C3%A9_Guelfi\",\n          \"http://en.wikipedia.org/wiki/Michael_Andretti\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lap_times=pd.read_csv('/content/lap_times.csv')"
      ],
      "metadata": {
        "id": "Z0JLMllgllVK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_times.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "iczYGouFlqdW",
        "outputId": "9d040f9c-ff23-4eb7-87fc-0b68cb9dd429"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   raceId  driverId  lap  position      time  milliseconds\n",
              "0     841        20    1         1  1:38.109         98109\n",
              "1     841        20    2         1  1:33.006         93006\n",
              "2     841        20    3         1  1:32.713         92713\n",
              "3     841        20    4         1  1:32.803         92803\n",
              "4     841        20    5         1  1:32.342         92342"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-db2de73b-1610-41e2-9d70-5071c09d419f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>lap</th>\n",
              "      <th>position</th>\n",
              "      <th>time</th>\n",
              "      <th>milliseconds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1:38.109</td>\n",
              "      <td>98109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1:33.006</td>\n",
              "      <td>93006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1:32.713</td>\n",
              "      <td>92713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1:32.803</td>\n",
              "      <td>92803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1:32.342</td>\n",
              "      <td>92342</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db2de73b-1610-41e2-9d70-5071c09d419f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-db2de73b-1610-41e2-9d70-5071c09d419f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-db2de73b-1610-41e2-9d70-5071c09d419f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bb356a40-c13c-4e63-b92d-c1b0f424544f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bb356a40-c13c-4e63-b92d-c1b0f424544f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bb356a40-c13c-4e63-b92d-c1b0f424544f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lap_times"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pit_stops=pd.read_csv('/content/pit_stops.csv')"
      ],
      "metadata": {
        "id": "m6DvL_7TlszA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pit_stops.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qj6qIU0clxr_",
        "outputId": "9a16277d-a08b-4f7c-9c9b-6c6152fd6275"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   raceId  driverId  stop  lap      time duration  milliseconds\n",
              "0     841       153     1    1  17:05:23   26.898         26898\n",
              "1     841        30     1    1  17:05:52   25.021         25021\n",
              "2     841        17     1   11  17:20:48   23.426         23426\n",
              "3     841         4     1   12  17:22:34   23.251         23251\n",
              "4     841        13     1   13  17:24:10   23.842         23842"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c44b628-42bc-4d07-9109-333d129c092d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>stop</th>\n",
              "      <th>lap</th>\n",
              "      <th>time</th>\n",
              "      <th>duration</th>\n",
              "      <th>milliseconds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>841</td>\n",
              "      <td>153</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>17:05:23</td>\n",
              "      <td>26.898</td>\n",
              "      <td>26898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>841</td>\n",
              "      <td>30</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>17:05:52</td>\n",
              "      <td>25.021</td>\n",
              "      <td>25021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>841</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>17:20:48</td>\n",
              "      <td>23.426</td>\n",
              "      <td>23426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>17:22:34</td>\n",
              "      <td>23.251</td>\n",
              "      <td>23251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>841</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>17:24:10</td>\n",
              "      <td>23.842</td>\n",
              "      <td>23842</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c44b628-42bc-4d07-9109-333d129c092d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c44b628-42bc-4d07-9109-333d129c092d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c44b628-42bc-4d07-9109-333d129c092d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2b6ed915-6516-4793-9549-13514a4d9cf4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b6ed915-6516-4793-9549-13514a4d9cf4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2b6ed915-6516-4793-9549-13514a4d9cf4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "pit_stops",
              "summary": "{\n  \"name\": \"pit_stops\",\n  \"rows\": 10089,\n  \"fields\": [\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 81,\n        \"min\": 841,\n        \"max\": 1110,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          1007,\n          847,\n          1016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 389,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          13,\n          849,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 1,\n        \"max\": 78,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          14,\n          70,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 7492,\n        \"samples\": [\n          \"14:24:37\",\n          \"15:01:30\",\n          \"17:54:59\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6969,\n        \"samples\": [\n          \"21.131\",\n          \"22.918\",\n          \"23.505\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"milliseconds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 278858,\n        \"min\": 12897,\n        \"max\": 3069017,\n        \"num_unique_values\": 6969,\n        \"samples\": [\n          21131,\n          22918,\n          23505\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "qualifying=pd.read_csv('/content/qualifying.csv')"
      ],
      "metadata": {
        "id": "QFjHGH-AlzRP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "qualifying.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Py8qbCY_l51a",
        "outputId": "0fe83c80-f563-4d06-d351-b160fd8743d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   qualifyId  raceId  driverId  constructorId  number  position        q1  \\\n",
              "0          1      18         1              1      22         1  1:26.572   \n",
              "1          2      18         9              2       4         2  1:26.103   \n",
              "2          3      18         5              1      23         3  1:25.664   \n",
              "3          4      18        13              6       2         4  1:25.994   \n",
              "4          5      18         2              2       3         5  1:25.960   \n",
              "\n",
              "         q2        q3  \n",
              "0  1:25.187  1:26.714  \n",
              "1  1:25.315  1:26.869  \n",
              "2  1:25.452  1:27.079  \n",
              "3  1:25.691  1:27.178  \n",
              "4  1:25.518  1:27.236  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-51fbef97-b9ee-4580-bf9d-80294067e72b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>qualifyId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>number</th>\n",
              "      <th>position</th>\n",
              "      <th>q1</th>\n",
              "      <th>q2</th>\n",
              "      <th>q3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>1:26.572</td>\n",
              "      <td>1:25.187</td>\n",
              "      <td>1:26.714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>18</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1:26.103</td>\n",
              "      <td>1:25.315</td>\n",
              "      <td>1:26.869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>1:25.664</td>\n",
              "      <td>1:25.452</td>\n",
              "      <td>1:27.079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1:25.994</td>\n",
              "      <td>1:25.691</td>\n",
              "      <td>1:27.178</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>1:25.960</td>\n",
              "      <td>1:25.518</td>\n",
              "      <td>1:27.236</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51fbef97-b9ee-4580-bf9d-80294067e72b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-51fbef97-b9ee-4580-bf9d-80294067e72b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-51fbef97-b9ee-4580-bf9d-80294067e72b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6429261-c3c3-46dc-8496-7465c0e74bc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6429261-c3c3-46dc-8496-7465c0e74bc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6429261-c3c3-46dc-8496-7465c0e74bc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "qualifying",
              "summary": "{\n  \"name\": \"qualifying\",\n  \"rows\": 9815,\n  \"fields\": [\n    {\n      \"column\": \"qualifyId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2847,\n        \"min\": 1,\n        \"max\": 9872,\n        \"num_unique_values\": 9815,\n        \"samples\": [\n          3346,\n          3854,\n          5012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 421,\n        \"min\": 1,\n        \"max\": 1110,\n        \"num_unique_values\": 460,\n        \"samples\": [\n          263,\n          48,\n          105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 381,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          827,\n          31,\n          811\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          209,\n          29,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          18,\n          35,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 1,\n        \"max\": 28,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          10,\n          26,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8621,\n        \"samples\": [\n          \"1:20.513\",\n          \"1:21.885\",\n          \"1:22.338\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5031,\n        \"samples\": [\n          \"1:28.017\",\n          \"1:35.853\",\n          \"1:29.687\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3180,\n        \"samples\": [\n          \"1:24.922\",\n          \"2:07.911\",\n          \"1:15.079\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "races=pd.read_csv('/content/races.csv')"
      ],
      "metadata": {
        "id": "6pLu6apZl9dB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "races.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "2Kb13IO1l73L",
        "outputId": "b4b258fa-3264-4fde-aa8c-9d0867fc039d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   raceId  year  round  circuitId                   name        date  \\\n",
              "0       1  2009      1          1  Australian Grand Prix  2009-03-29   \n",
              "1       2  2009      2          2   Malaysian Grand Prix  2009-04-05   \n",
              "2       3  2009      3         17     Chinese Grand Prix  2009-04-19   \n",
              "3       4  2009      4          3     Bahrain Grand Prix  2009-04-26   \n",
              "4       5  2009      5          4     Spanish Grand Prix  2009-05-10   \n",
              "\n",
              "       time                                                url fp1_date  \\\n",
              "0  06:00:00  http://en.wikipedia.org/wiki/2009_Australian_G...       \\N   \n",
              "1  09:00:00  http://en.wikipedia.org/wiki/2009_Malaysian_Gr...       \\N   \n",
              "2  07:00:00  http://en.wikipedia.org/wiki/2009_Chinese_Gran...       \\N   \n",
              "3  12:00:00  http://en.wikipedia.org/wiki/2009_Bahrain_Gran...       \\N   \n",
              "4  12:00:00  http://en.wikipedia.org/wiki/2009_Spanish_Gran...       \\N   \n",
              "\n",
              "  fp1_time fp2_date fp2_time fp3_date fp3_time quali_date quali_time  \\\n",
              "0       \\N       \\N       \\N       \\N       \\N         \\N         \\N   \n",
              "1       \\N       \\N       \\N       \\N       \\N         \\N         \\N   \n",
              "2       \\N       \\N       \\N       \\N       \\N         \\N         \\N   \n",
              "3       \\N       \\N       \\N       \\N       \\N         \\N         \\N   \n",
              "4       \\N       \\N       \\N       \\N       \\N         \\N         \\N   \n",
              "\n",
              "  sprint_date sprint_time  \n",
              "0          \\N          \\N  \n",
              "1          \\N          \\N  \n",
              "2          \\N          \\N  \n",
              "3          \\N          \\N  \n",
              "4          \\N          \\N  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22434b95-35f1-40a6-9e0f-ec2c0f7060c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>year</th>\n",
              "      <th>round</th>\n",
              "      <th>circuitId</th>\n",
              "      <th>name</th>\n",
              "      <th>date</th>\n",
              "      <th>time</th>\n",
              "      <th>url</th>\n",
              "      <th>fp1_date</th>\n",
              "      <th>fp1_time</th>\n",
              "      <th>fp2_date</th>\n",
              "      <th>fp2_time</th>\n",
              "      <th>fp3_date</th>\n",
              "      <th>fp3_time</th>\n",
              "      <th>quali_date</th>\n",
              "      <th>quali_time</th>\n",
              "      <th>sprint_date</th>\n",
              "      <th>sprint_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>2009-03-29</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Australian_G...</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2009</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Malaysian Grand Prix</td>\n",
              "      <td>2009-04-05</td>\n",
              "      <td>09:00:00</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Malaysian_Gr...</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2009</td>\n",
              "      <td>3</td>\n",
              "      <td>17</td>\n",
              "      <td>Chinese Grand Prix</td>\n",
              "      <td>2009-04-19</td>\n",
              "      <td>07:00:00</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Chinese_Gran...</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2009</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>Bahrain Grand Prix</td>\n",
              "      <td>2009-04-26</td>\n",
              "      <td>12:00:00</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Bahrain_Gran...</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2009</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>Spanish Grand Prix</td>\n",
              "      <td>2009-05-10</td>\n",
              "      <td>12:00:00</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Spanish_Gran...</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "      <td>\\N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22434b95-35f1-40a6-9e0f-ec2c0f7060c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22434b95-35f1-40a6-9e0f-ec2c0f7060c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22434b95-35f1-40a6-9e0f-ec2c0f7060c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5bc2e9b2-e352-4014-aeda-203cdf29b483\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bc2e9b2-e352-4014-aeda-203cdf29b483')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5bc2e9b2-e352-4014-aeda-203cdf29b483 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "races",
              "summary": "{\n  \"name\": \"races\",\n  \"rows\": 1101,\n  \"fields\": [\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321,\n        \"min\": 1,\n        \"max\": 1120,\n        \"num_unique_values\": 1101,\n        \"samples\": [\n          329,\n          690,\n          414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 1950,\n        \"max\": 2023,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          2005,\n          2013,\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"round\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          1,\n          14,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"circuitId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 1,\n        \"max\": 80,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          4,\n          36,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"United States Grand Prix\",\n          \"Mexico City Grand Prix\",\n          \"Qatar Grand Prix\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1101,\n        \"samples\": [\n          \"1990-07-29\",\n          \"1966-05-22\",\n          \"1986-08-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"\\\\N\",\n          \"19:00:00\",\n          \"14:10:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"url\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1101,\n        \"samples\": [\n          \"http://en.wikipedia.org/wiki/1990_German_Grand_Prix\",\n          \"http://en.wikipedia.org/wiki/1966_Monaco_Grand_Prix\",\n          \"http://en.wikipedia.org/wiki/1986_Hungarian_Grand_Prix\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp1_date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          \"2022-08-26\",\n          \"2021-09-10\",\n          \"2021-11-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp1_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"\\\\N\",\n          \"18:30:00\",\n          \"15:30:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp2_date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          \"2022-08-26\",\n          \"2021-09-11\",\n          \"2021-11-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp2_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"\\\\N\",\n          \"15:00:00\",\n          \"21:30:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp3_date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 55,\n        \"samples\": [\n          \"2022-08-27\",\n          \"2021-05-01\",\n          \"2022-09-03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fp3_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"\\\\N\",\n          \"12:00:00\",\n          \"11:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quali_date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          \"2022-08-27\",\n          \"2021-09-10\",\n          \"2021-11-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quali_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"18:00:00\",\n          \"05:00:00\",\n          \"\\\\N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sprint_date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2023-10-21\",\n          \"2023-07-29\",\n          \"\\\\N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sprint_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"\\\\N\",\n          \"14:30:00\",\n          \"18:30:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results=pd.read_csv('/content/results.csv')"
      ],
      "metadata": {
        "id": "-77VZoXOmCD9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "4g6kHnDdmHbV",
        "outputId": "4a3ce505-ab74-4f18-eb32-925044645c3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   resultId  raceId  driverId  constructorId number  grid position  \\\n",
              "0         1      18         1              1     22     1        1   \n",
              "1         2      18         2              2      3     5        2   \n",
              "2         3      18         3              3      7     7        3   \n",
              "3         4      18         4              4      5    11        4   \n",
              "4         5      18         5              1     23     3        5   \n",
              "\n",
              "  positionText  positionOrder  points  laps         time milliseconds  \\\n",
              "0            1              1    10.0    58  1:34:50.616      5690616   \n",
              "1            2              2     8.0    58       +5.478      5696094   \n",
              "2            3              3     6.0    58       +8.163      5698779   \n",
              "3            4              4     5.0    58      +17.181      5707797   \n",
              "4            5              5     4.0    58      +18.014      5708630   \n",
              "\n",
              "  fastestLap rank fastestLapTime fastestLapSpeed  statusId  \n",
              "0         39    2       1:27.452         218.300         1  \n",
              "1         41    3       1:27.739         217.586         1  \n",
              "2         41    5       1:28.090         216.719         1  \n",
              "3         58    7       1:28.603         215.464         1  \n",
              "4         43    1       1:27.418         218.385         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95cdf3c0-e360-4939-b9a0-fc2a22ce819f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>resultId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>number</th>\n",
              "      <th>grid</th>\n",
              "      <th>position</th>\n",
              "      <th>positionText</th>\n",
              "      <th>positionOrder</th>\n",
              "      <th>points</th>\n",
              "      <th>laps</th>\n",
              "      <th>time</th>\n",
              "      <th>milliseconds</th>\n",
              "      <th>fastestLap</th>\n",
              "      <th>rank</th>\n",
              "      <th>fastestLapTime</th>\n",
              "      <th>fastestLapSpeed</th>\n",
              "      <th>statusId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>58</td>\n",
              "      <td>1:34:50.616</td>\n",
              "      <td>5690616</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "      <td>1:27.452</td>\n",
              "      <td>218.300</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>8.0</td>\n",
              "      <td>58</td>\n",
              "      <td>+5.478</td>\n",
              "      <td>5696094</td>\n",
              "      <td>41</td>\n",
              "      <td>3</td>\n",
              "      <td>1:27.739</td>\n",
              "      <td>217.586</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>58</td>\n",
              "      <td>+8.163</td>\n",
              "      <td>5698779</td>\n",
              "      <td>41</td>\n",
              "      <td>5</td>\n",
              "      <td>1:28.090</td>\n",
              "      <td>216.719</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>58</td>\n",
              "      <td>+17.181</td>\n",
              "      <td>5707797</td>\n",
              "      <td>58</td>\n",
              "      <td>7</td>\n",
              "      <td>1:28.603</td>\n",
              "      <td>215.464</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>58</td>\n",
              "      <td>+18.014</td>\n",
              "      <td>5708630</td>\n",
              "      <td>43</td>\n",
              "      <td>1</td>\n",
              "      <td>1:27.418</td>\n",
              "      <td>218.385</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95cdf3c0-e360-4939-b9a0-fc2a22ce819f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95cdf3c0-e360-4939-b9a0-fc2a22ce819f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95cdf3c0-e360-4939-b9a0-fc2a22ce819f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d23cc09e-5fec-48a9-b778-0375ae27f1cc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d23cc09e-5fec-48a9-b778-0375ae27f1cc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d23cc09e-5fec-48a9-b778-0375ae27f1cc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results",
              "summary": "{\n  \"name\": \"results\",\n  \"rows\": 26080,\n  \"fields\": [\n    {\n      \"column\": \"resultId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7530,\n        \"min\": 1,\n        \"max\": 26085,\n        \"num_unique_values\": 26080,\n        \"samples\": [\n          1442,\n          2465,\n          3024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303,\n        \"min\": 1,\n        \"max\": 1110,\n        \"num_unique_values\": 1091,\n        \"samples\": [\n          854,\n          954,\n          1105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 272,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 857,\n        \"samples\": [\n          713,\n          604,\n          122\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 210,\n        \"samples\": [\n          32,\n          138,\n          82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 130,\n        \"samples\": [\n          \"48\",\n          \"40\",\n          \"15\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"grid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 34,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          26,\n          8,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"15\",\n          \"19\",\n          \"27\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionText\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 39,\n        \"samples\": [\n          \"28\",\n          \"31\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionOrder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 39,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          34,\n          37,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.219714734476984,\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          26.0,\n          19.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"laps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 0,\n        \"max\": 200,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          3,\n          170,\n          181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7000,\n        \"samples\": [\n          \"+53.271\",\n          \"+37.24\",\n          \"1:10:52.092\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"milliseconds\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7213,\n        \"samples\": [\n          \"4890945\",\n          \"5548856\",\n          \"6331718\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastestLap\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 80,\n        \"samples\": [\n          \"25\",\n          \"39\",\n          \"3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rank\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"9\",\n          \"\\\\N\",\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastestLapTime\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6970,\n        \"samples\": [\n          \"1:18.225\",\n          \"1:47.266\",\n          \"1:34.363\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastestLapSpeed\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7145,\n        \"samples\": [\n          \"188.061\",\n          \"230.198\",\n          \"217.823\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"statusId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 1,\n        \"max\": 141,\n        \"num_unique_values\": 137,\n        \"samples\": [\n          110,\n          109,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seasons=pd.read_csv('/content/seasons.csv')"
      ],
      "metadata": {
        "id": "imlHFlALmI4V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "seasons.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PwOj9eiumMdf",
        "outputId": "4865cacf-fe12-49ac-abfe-aa33356891a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year                                                url\n",
              "0  2009  http://en.wikipedia.org/wiki/2009_Formula_One_...\n",
              "1  2008  http://en.wikipedia.org/wiki/2008_Formula_One_...\n",
              "2  2007  http://en.wikipedia.org/wiki/2007_Formula_One_...\n",
              "3  2006  http://en.wikipedia.org/wiki/2006_Formula_One_...\n",
              "4  2005  http://en.wikipedia.org/wiki/2005_Formula_One_..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65d696d3-18d2-4cbc-8e5b-92be92a66bc1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2009</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2009_Formula_One_...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2008</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2008_Formula_One_...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2007</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2007_Formula_One_...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2006</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2006_Formula_One_...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2005</td>\n",
              "      <td>http://en.wikipedia.org/wiki/2005_Formula_One_...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65d696d3-18d2-4cbc-8e5b-92be92a66bc1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-65d696d3-18d2-4cbc-8e5b-92be92a66bc1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-65d696d3-18d2-4cbc-8e5b-92be92a66bc1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e9471d7c-a70c-42d1-9fb6-cac1f4c22492\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9471d7c-a70c-42d1-9fb6-cac1f4c22492')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e9471d7c-a70c-42d1-9fb6-cac1f4c22492 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "seasons",
              "summary": "{\n  \"name\": \"seasons\",\n  \"rows\": 74,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 1950,\n        \"max\": 2023,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          2005,\n          2013,\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"url\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 74,\n        \"samples\": [\n          \"http://en.wikipedia.org/wiki/2005_Formula_One_season\",\n          \"http://en.wikipedia.org/wiki/2013_Formula_One_season\",\n          \"http://en.wikipedia.org/wiki/1991_Formula_One_season\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sprint_results=pd.read_csv('/content/sprint_results.csv')"
      ],
      "metadata": {
        "id": "nhB_3pVImNfl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sprint_results.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "u-O4CBtFmVTw",
        "outputId": "a0dfc861-64d8-4841-d9af-b9fa79a111bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   resultId  raceId  driverId  constructorId  number  grid position  \\\n",
              "0         1    1061       830              9      33     2        1   \n",
              "1         2    1061         1            131      44     1        2   \n",
              "2         3    1061       822            131      77     3        3   \n",
              "3         4    1061       844              6      16     4        4   \n",
              "4         5    1061       846              1       4     6        5   \n",
              "\n",
              "  positionText  positionOrder  points  laps       time milliseconds  \\\n",
              "0            1              1       3    17  25:38.426      1538426   \n",
              "1            2              2       2    17     +1.430      1539856   \n",
              "2            3              3       1    17     +7.502      1545928   \n",
              "3            4              4       0    17    +11.278      1549704   \n",
              "4            5              5       0    17    +24.111      1562537   \n",
              "\n",
              "  fastestLap fastestLapTime  statusId  \n",
              "0         14       1:30.013         1  \n",
              "1         17       1:29.937         1  \n",
              "2         17       1:29.958         1  \n",
              "3         16       1:30.163         1  \n",
              "4         16       1:30.566         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-137e8dc3-95d0-4288-8131-739fb178c92b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>resultId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>number</th>\n",
              "      <th>grid</th>\n",
              "      <th>position</th>\n",
              "      <th>positionText</th>\n",
              "      <th>positionOrder</th>\n",
              "      <th>points</th>\n",
              "      <th>laps</th>\n",
              "      <th>time</th>\n",
              "      <th>milliseconds</th>\n",
              "      <th>fastestLap</th>\n",
              "      <th>fastestLapTime</th>\n",
              "      <th>statusId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1061</td>\n",
              "      <td>830</td>\n",
              "      <td>9</td>\n",
              "      <td>33</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>17</td>\n",
              "      <td>25:38.426</td>\n",
              "      <td>1538426</td>\n",
              "      <td>14</td>\n",
              "      <td>1:30.013</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1061</td>\n",
              "      <td>1</td>\n",
              "      <td>131</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>17</td>\n",
              "      <td>+1.430</td>\n",
              "      <td>1539856</td>\n",
              "      <td>17</td>\n",
              "      <td>1:29.937</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1061</td>\n",
              "      <td>822</td>\n",
              "      <td>131</td>\n",
              "      <td>77</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>+7.502</td>\n",
              "      <td>1545928</td>\n",
              "      <td>17</td>\n",
              "      <td>1:29.958</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1061</td>\n",
              "      <td>844</td>\n",
              "      <td>6</td>\n",
              "      <td>16</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>+11.278</td>\n",
              "      <td>1549704</td>\n",
              "      <td>16</td>\n",
              "      <td>1:30.163</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>1061</td>\n",
              "      <td>846</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>+24.111</td>\n",
              "      <td>1562537</td>\n",
              "      <td>16</td>\n",
              "      <td>1:30.566</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-137e8dc3-95d0-4288-8131-739fb178c92b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-137e8dc3-95d0-4288-8131-739fb178c92b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-137e8dc3-95d0-4288-8131-739fb178c92b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09b5a9cb-1cce-4eb7-9a28-9215084d0966\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09b5a9cb-1cce-4eb7-9a28-9215084d0966')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09b5a9cb-1cce-4eb7-9a28-9215084d0966 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sprint_results",
              "summary": "{\n  \"name\": \"sprint_results\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"resultId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52,\n        \"min\": 1,\n        \"max\": 180,\n        \"num_unique_values\": 180,\n        \"samples\": [\n          20,\n          43,\n          154\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"raceId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 1061,\n        \"max\": 1110,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1107,\n          1065,\n          1095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"driverId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 298,\n        \"min\": 1,\n        \"max\": 858,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          839,\n          856,\n          847\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"constructorId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88,\n        \"min\": 1,\n        \"max\": 214,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          51,\n          131,\n          117\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          27,\n          6,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"grid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 20,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          2,\n          19,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"1\",\n          \"18\",\n          \"16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionText\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"16\",\n          \"10\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"positionOrder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 20,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1,\n          18,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          5,\n          2,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"laps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 24,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          21,\n          17,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 171,\n        \"samples\": [\n          \"+13.133\",\n          \"+47.739\",\n          \"+50.014\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"milliseconds\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 171,\n        \"samples\": [\n          \"1824440\",\n          \"1797298\",\n          \"1799573\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastestLap\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"9\",\n          \"11\",\n          \"14\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastestLapTime\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 175,\n        \"samples\": [\n          \"1:58.943\",\n          \"1:10.775\",\n          \"1:14.507\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"statusId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 1,\n        \"max\": 130,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          76,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "status=pd.read_csv('/content/status.csv')\n",
        "status.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5S9kNozZmd5Z",
        "outputId": "22f228b3-0a14-40b7-a3fd-5b670d67858b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   statusId        status\n",
              "0         1      Finished\n",
              "1         2  Disqualified\n",
              "2         3      Accident\n",
              "3         4     Collision\n",
              "4         5        Engine"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6300bacf-7cc5-4e3e-819f-03037a5ed205\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>statusId</th>\n",
              "      <th>status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Disqualified</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Accident</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Collision</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Engine</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6300bacf-7cc5-4e3e-819f-03037a5ed205')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6300bacf-7cc5-4e3e-819f-03037a5ed205 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6300bacf-7cc5-4e3e-819f-03037a5ed205');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4d075265-cc79-4f0a-b3c3-41c527b445ce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d075265-cc79-4f0a-b3c3-41c527b445ce')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4d075265-cc79-4f0a-b3c3-41c527b445ce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "status",
              "summary": "{\n  \"name\": \"status\",\n  \"rows\": 139,\n  \"fields\": [\n    {\n      \"column\": \"statusId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 1,\n        \"max\": 141,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          138,\n          67,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 139,\n        \"samples\": [\n          \"Debris\",\n          \"Wheel bearing\",\n          \"Fuel pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drivers.plot.area(alpha=0.4)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "fCcCxX0Ppl-u",
        "outputId": "91378de3-df60-40fd-efb9-495eb49fe65e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 65
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lap_times.plot.scatter(x ='raceId', y ='driverId', c ='lap', cmap ='coolwarm')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "nIILYQOypup3",
        "outputId": "758d562b-a5ba-4f86-f31f-56b6838d29c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='raceId', ylabel='driverId'>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results.plot.scatter(x='points',y='laps',c='grid',cmap='ocean')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "Ag1PK-mxp8Rh",
        "outputId": "28ff2626-c17e-4e3c-8add-848a0002af3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='points', ylabel='laps'>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "circuits.plot.box()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "BgoMwsHksVQN",
        "outputId": "231879c8-8997-441e-c094-52d42c5bcb58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 90
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(np.random.randn(1000, 2), columns =['driverId', 'points'])\n",
        "df.plot.hexbin(x ='driverId', y ='points', gridsize = 25, cmap ='pink')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "HhRfiA28tCzq",
        "outputId": "d8db13ca-c42a-4bd2-b707-a442ebea9a38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='driverId', ylabel='points'>"
            ]
          },
          "metadata": {},
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhkAAAGzCAYAAACCdQWeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADX2UlEQVR4nOydeXwcZ33/PzOzO7P3Je2hlXYlWZYvObZjO4dxQhPOBkjxL0BJShNTSNNw56IklIZwhEBoE6ANtCX0l+AWfhQaoEBDaIPJHTu2Y8f3IUva1bHa1d73MfP8/tgjWh27OytZV553Xvt6xat55nl2nmfm+c5zfD4MIYSAQqFQKBQKZZ5hF7sAFAqFQqFQViY0yKBQKBQKhXJBoEEGhUKhUCiUCwINMigUCoVCoVwQaJBBoVAoFArlgkCDDAqFQqFQKBcEGmRQKBQKhUK5INAgg0KhUCgUygWBBhkUCoVCoVAuCDTIoFAoFAqFckFQLHYBGuV73/sevve972FwcBAA0NfXh3vvvRfXXHNNw+eQJAmjo6PQ6/VgGOYClZRCoVAoKwFCCOLxOJxOJ1j2wryTZzIZ5HK5eTkXz/NQqVTzcq75glku3iW/+tWvwHEcent7QQjB448/jm9+85t49dVX0dfX19A5hoeH4XK5LnBJKRQKhbKS8Hq96OjomPfzZjIZdHd3w+fzzcv5HA4HBgYGllSgsWyCjJmwWCz45je/iY9+9KMNHR+NRmEymeD1emEwGC5w6SgUCoWynInFYnC5XIhEIjAajRfk/EajcV76pHJZo9Hokurfls10yWREUcRPf/pTJJNJ7NixY9bjstksstls5d/xeBwAYDAYllQlUCgUCmXpcqGn1w0GPQwG/RzPsjTHC5ZVkHH06FHs2LEDmUwGOp0OP//5z7Fhw4ZZj3/ggQfwpS99aQFLSKFQKBSKPAghmOukwlKdlFhWu0vWrl2Lw4cPY9++ffjYxz6G3bt348SJE7Mef8899yAajVY+Xq93AUtLoVAoFEojkHn6LD2W1UgGz/NYvXo1AGDbtm145ZVX8O1vfxv//M//POPxgiBAEISFLCKFQqFQKJQSyyrImIokSVVrLigUCoVCWX7Mx0gEHcmYE/fccw+uueYauN1uxONx/OhHP8If/vAHPPXUU4tdNAqFQqFQmoauyVgC+P1+3HTTTVi7di3e+ta34pVXXsFTTz2Ft7/97QtajrMnT+KO3bvx7a98BalksuF0mUwG//TNb+Izf/7nOHHkiKw8D7z4Ij7xwQ/ih9/9LvL5fMPpopEIHvz853H3LbfAWxIxawRCCP73V7/CX73vffj1f/yHrMbrGxnBFz7xCXz1rrsQmphoOJ0oivjJv/4rPvaBD+CF3/++4XRAsU7u/PCH51Qnxw8flpXnwZdewievv35OdeIZGGg4HSEET//613Oqk6/ceSeCgUDD6SRRxB9+9Ss8fM89OHbgQMPpgMWtk8cfeUR+nfzN3+Bzf/mXTdfJr37ykwWpE1EU8dPHHsPHPvABPP/00w2nA4Bzp04V6+TLX5ZdJ//8d3+HT3/oQ7Lr5NDLLzdVJ7FodMHrhHKBIG8gotEoAUCi0ajstH6fj9zzV39FuliWdHMc6WRZcrHVSv7fD35ACoXCrOlEUSQ///d/J5c4naSTYUgXx5FOhiF3fvjDZGx4uGaeA2fPkluuu464AdLFssQNkDevXk1+98tfEkmSZk2XzWbJv37726TPaCRdHEe6OY6sUijIV++6i0RCoZp5vnbgAHn/lVdW5fmeSy4hr7zwQs108ViMfPMLXyCrBYF0l/Jcp9WS73796ySdTtdM+8xTT5G3rF9fledN11xDTh8/XjPdXOvk0vb2qjq5Y/duMur11sxz8Ny5aXVyZU9Pw3WycR7rZP/zz9dMF4/FyN/97d/OXCepVM20R15+mdz5wQ+SD156Kbn+8svJBy+9lDzwmc8Qb39/zXSB8XHy+VtvnVYnP3700bp18osf/Whandx+000N1clfve99VdfnilWryFO/+EX9OvnOd8hGk6lS3lUKBfnKnXfWr5ODB8kH3vzmqjzfvX072f/cczXTzVYnjzzwQN06efZ3vyNv3bChKs8b//iP694nU+uka4Hq5Nb3v192neRyuQWvk1rMpc+Qc/5wOEBEMTunTzgcuKBlbRYaZNQhlUySb3/lK2SNWk26OY64gcqnk2GIGyBvWb+ePPPUU9PSvvSHP5BrtmypOrb86eY4sloQyDe/8AUSj8Wq0oUmJsh9n/kM6VYoSLdCUZWufPO874oryJFXXqlKJ0kS+c3Pfkbe1NVF3FPyK6ftMxrJD771LZLNZqvSDg8NkU9/6EPFsk3Js/y7//L//B8ycPZsVbp8Pk/+7Z/+iWxuaamUbeo1usTpJE/8278RURSr0p587TXyZ297W1UelTwVCtLJMOTuW24hfp9vWp1856tfXfA6+dJttzVVJ//9n/+5bOpk6OxZcv8nP0k+eOml5IZScFH+3LBjB7n+ssvIvzzwAAlPTEyrk3+4/36yVqOpWSd/+O1vp9XJy888Q961dWvNOnnwb/5mWp2Eg0Hypdtvr1kn1+3cSQ7v3z+tTp584gmys7t71jrZYDCQRx9+eMY6+cyf/3ntOtm1i5w/c2Zanfz7P/8z2dzSQjpnqZPtbW3kP/fsmVYnp44eJR96+9vr3ifjY2Oy6+TqdeuaqpMenicP/s3fkNiUZ+m81MmUazO5Tr7/0EMkk8nIrpObZ6iTRli4IMNPRDEzp0847KdBxmIjp8EUCgXyH//3/5Ktdvu0m2zaDVBqyH/2treRk6+9Rs6dOkX+4j3vqfrbrGlZlmyyWMi//dM/kUQiQf7pm98k63S6uunKN8+n/uzPiHdwkBx6+WXy3ssvr7qZZ/0wDNnR2Ul+87OfkUg4TB743OfIKqVy2oNoWp6lB8d9n/kMCQYC5Onf/Ib80Zo1Mz6IZnqg/fHmzeSlP/yB+EZGyGc/8hHSyTDTHgoz/c41ajX59le+QhLxOPnpY481XScfufbaGR/U9erkn//u78h6vX5B6+Trd99drJN610ehIF0cN6c6eXHvXhIKBMg/feUr5PrLLiM37NhRFVxM/dxw+eXkxiuvJP/5gx+QVDJJfvb442SbwyGrTk4cOUL6T5+WXSd7vvc9kkgkyL/8/d83Viel6/fJG26o1MmuHTuK16DBOvn1T39KopEI+cY995Aenm+4Tr746U+TCb9fdp28c9Mm8uLevcQ3Okr++qMfbeo+abhOStfghre+tVInH/2TP7mwdVL6+yeuv554BgbIq/v2Veqkkfvkcre76Tq591OfIsFA4IL0Gc3wRggylrWsuFzKEq71ZFcLhQKu27kTR/bvB8MwDc/rcQoFxEIBDMOA5TiIhUJD6cp5KJRKiIWCrHlEjuMgSRIIIeA4DqIoNpSOZVlIkgSFQgFJkiBJUsN5shwHBsX54fJ5Gk0niSI4jgNK6eWgUChQKF3fC10nlTybqROFApIoLps60Wk02LhhAxiWhSSzTk6cPo1oNCqvTkrXZEHrhOMgEQIiSQtbJwwDsVCotP1Gyyo2e58wDBQctzzuk0V6dqnUavxk715s2r697vGN9hnNUj5/KDQ+L7LiFot9ycmKL5uFnwtJaGICR/bvBwBZN035xiSEyLpJy3kU8nnZC5XEUmdW/v9GKd+YhUJB1k0KFBcElvOSk7b8kBUnpZdDYdL1bZRm66SSZzN1MulhuxzqxGgwFB/WMuskn88jGo0CkFknpXwWtE5EEaR0XRa0Tkq/T861FedynxCyfO6TRXp2ZVIpvPzMM7LSXXhWrhgXDTIoFAqF8obhQvuQUKpZNjoZFAqFQqGsTKgYF4VCoVAolAsAWcFiXDTIoFAoFAplUVm5Ixl0TQaFQqFQKJQLAh3JoFAoFAplUVm5Ixk0yHiDwjAMbFYrDHo9xnw+JGR4GVCWHhqNBk6HA8lUCr7xcVnzs9FYDOlMBh1OJ9RqdcPpYvF4M0WFQqFAe1sbWJbF8OioLE+LZhF4Hu1OJ/KFAkbHxpraQi2Xcp2kUimMyawTyoVD7rbXhWAlr8mg0yUzYLXbcd2NNwJARRBnJWE2mbBl0yZ0d3aixWLBRX19WLN6NQRBWOyiUWTCK5XoWbUKm/r60NrSgk6XC1s3b0aLxdLwOWLxOCaCQRw+ehTnBwbqdvqpVAonT5/GmXPnZJWVZRg429qwdfNmtDkcsNts2Lp5Mzra28GyF+ZRxHEcOl0ubNm0CTarFe2l/B12+wXbysgrlejp7q7UibuJOqFcONyrVuGdu3YtdjEWnWeffRbXXnstnE4nGIbBL37xi1mPvfXWW8EwDL71rW/JzoeOZMwAwzB4+Ic/xJ9/7GP48u234/C+fbJUFJcqOq0WXZ2d0Ot00/5mMZthMZsx5vNhZHQUhQV406M0D8eycLa1wdnWBoZhqjpMnuexZvVqJJNJDHg8iMsYcRgPBBAIBtHudKLNbq8KsnO5HLwjI/AHArI76HIApFQqq9IyDIMOpxMOux0erxd+GY6ktWAYBnabDa6ODnAsW5WnQqFAl9uNNocDQx4PQuHwvOR5oeqEMndYloXeaMRn778f1998M5RK5WIXaQoLP12STCaxefNmfOQjH8F1110363E///nP8fLLL8PpdDZVKhpk1GDbjh34xUsv4cknnsBX77wTIx4PsESHpGoh8DzcLhdaW1pmHVIrPxDbHA7YbDYMDw9jbHx8IYtJaRC71QqXywVFSbZ6NjQaDTauX49QOIwhrxeZTKah80uSBO/wMHzj4+h0uWA2meAbH8fI6CikUvtpdGjWoNeju7MTGo1m1mMYhoFSoUBPdzecbW0YHBpCpKQk2gwWsxldbjd4np/1+jAMA5UgYG1vL+KJBAaHhuY0ZXih64TSHJxCAZZlcctdd+Fjn/sc9EtIbruahQ8yrrnmGlxzzTU1jxkZGcGnPvUpPPXUU3j3u9/dVKlokFEHhmHwrve9D2+79lrs+e538fB99yE+hwfgQmMxm9Hb01N58NV7A2VK3gcd7e0IRyLIZLMLUUxKA7AMg4s2boRapWpoJKF8jNlkQiaTwZDXKyu/fD6Pc+fPg0Fzj7/yaIGcuWKVSgVXRweisVhTc8zr1qyB2WSSlUan1aLd6cTps2dl5zenOslmMeTxyM6T0jjvveEGfPb+++F0uRa7KAtGLBar+rcgCE1NhUuShBtvvBGf/exn0dfX13R56JqMBuF5Hh+97Ta8MDAArV6/2MVpGKPROG3othFy+TwNMJYYgiBAo1bLrkuGYRCORJrOt9n3q/IaBDnlZVB8SDa7iE1ugAEUy9fsyAm/SHVCqc83Hn0UD//wh8siwCgv/JzrBwBcLheMRmPl88ADDzRVpm984xtQKBT49Kc/PaffRkcyZGI0m6HRapGkc6qU5QT1a6iLHNfSeclvwXJ6Y9Kzdu1iF0EG8zdd4vV6q1xYmxnFOHjwIL797W/j0KFDc14gTUcyKBQKhUJZIRgMhqpPM0HGc889B7/fD7fbDYVCAYVCgaGhIdx5553o6uqSdS46kkGhUCgUyqJCAMx19+L8jcLdeOONeNvb3lb13Tvf+U7ceOON+Iu/+AtZ56JBBoVCoVAoi8hiiHElEgmcm6R1MzAwgMOHD8NiscDtdqOlpaXqeKVSCYfDgbUyp6FokEGhUCgUyqKy8FtYDxw4gKuvvrry7zvuuAMAsHv3bjz22GNzLMvr0CCDQqFQKJQ3GFdddZWs0Y/BwcGm8qELP2Vy9uTJZaWTQaEAWBQRueUmW7fQ3g/L7fosN154+ukl6+cxHTJPn6UHDTIaJDA+js/feivesXEjsstIpS8wMYFCoSDrZiMA1CoVdDPIj1PmB06mVwfDMEhnMk2bkrU5HODqqFHOlCdQlOFuBr/f39RD3mI2QyPDqG0yoz5fU/Pb1tZWKJv4nZlMBsFQCID8IMVhs10wzxYK8PB99+HaSy/FK88/v9hFqct86mQsNRiyVEt2AYjFYjAajYhGo1X7iGuRTqXw/YcewiNf+xryudyCuDfONyzLwulwoL1khFOvo0lnMnOWdqZUU9ZgsLW2Fv00OK7iEyM1cAuqVCp0ud0wlcTV5GDUaGDUaJAvFHDszBmcHRwEamhClMuq0+nQ5XZDp9UiFA5j0ONBLpermx/Hsuhob4fDbpfdiap5HhadDhzLot/jwWunTyMn06VVo1ajq7MTRoMBBI3rUYiiKKtOJmPQ69HV2QltDfn0mcjn8xgeHYVvfHzBdTreCHAcB1EU8Y5du/D5Bx9Ed2+vrPTN9BnNnH98/AwMhrmJPMZicdjtay5YWZuFBhmzIIointizB1+/+24Em3wjW2oolUq42tths1oBVCsxEkJQKBTgGR6eN5MqyusdttFoRKfLNa0Tmmo6NrWdKRQKuDs6YLNaZQcXWkGAWaeDYoqTcCyRwOGTJzEyS8cmCAI6XS5YzOaqPCVJgs/vx/DIyLRgu3yeNrsd7U6nbAMqXqGARaeDiuervs/n8zjR349T/f3FAWEZ96HJaERXZyfUKpWsstSrk1rMZgRXj3RJ9j0cDtNg4wLAKRQghOCmj38cn7n3XlhaWxtKt3BBxul5CjLW0iBjMWm0wRQKBVy3cyeO7N+/Im94tVpdeSsuD7ONjI1hdGxs2TvNLjUmX+tapFIpDHm9ldEjpmSL3t7WVuWE2giCUgmLTgehTkfvDwZx6MQJhEt5chwHV3s77HWG8fOFAkZGRzHm81W+s5jN6HS5oJLZoXMsC7NOB60g1OyUk+k0Xjt1CoMjI7LODwA2qxXujg4oFApZHf/UOmkUlmHgcDjQ4XSCneIAW49YPI5BjwfJOZi1UWaH5Tio1Gr8ZO9ebNq+ve7xCxdknJqnIGMdDTIWk0YbjN/nwyVtbQtYssXBaDBAr9fD7/fLHpKm1KbN4YBWo0FrS4usTiYSjSIej8Nms0GY8lZfD6NGA0GphLqG++hUCCE4OTCAcCwGu80ma/1FJpOBf2ICZqMRepl+PjqVCrxCAZ1aDVbG9en3eLD/tddk5QUUpwwv3rQJvMxrCgCDHk9VQNUoCoUC27ZskT1lRAjB6XPnEJ4nC3pKNSzL4p4HH8Qtd95Z91gaZMwduoX1DUw0FkN0imMfZX6wWa1NLV40GY11Rz1mw6jVyuqwgeKISZvNBq1OJ3ttukqlgrujQ2aqImqeh1bmqAcAGJpcjCxJEgqiCPkhBppehCp3wXUZhmGgUasRiURW3CjqUmCuXhwXgsUQ41ooaJBBoVAoFMqisvBiXAsF3T9FoVAoFArlgkBHMigUCoVCWUTodAmFQqFQKJQLhIS5u7AuzZ2BNMigUCgUCmVRoWsyKJQKGo0Gq1etQpvDsSRXak9G4HlcvH49tvX1QS0IstK2WCxYs3o1TCaT7Dx5mWJUQEnsanwcZ86dQ1ymfHgymcRLr76Kk/39slVpVUolLHo9lDL1OJoln8/j2JkzOHD0KFIyJPoJIRifmGg6X+/wMDxeLwqFQsNpJEma0w6s/oEBjMjUnxFFEbF4fMkOfy93qBbQwkJ1MmaAEII7du/GE3v2VGRpKQDP83B1dMDa0lL5LpfPY8jjqfg3LBU4lsWa7m5s7O0Fy3FAac6zrB5ZqFGnep0OXZ2d0Gm1IISAYZiiSNLQEJKp1Ox5chw6nE447PaG5NvLEEIQjkQw6PEgm81Wvm9E4Cqby8Hj9WIiGKx8p1apsGX9enSWZOQbyb9MPJ1GJJmULavdCKIkwefzYXh0FJIkVa7Rhp4erOvpqekdEgiFcOj4cYTmQeq+EdGx2eqkWXieR6fLhRaLZdY6IYTAPzEhOxCiyKOzpwd7nnoKnT09dY9dKJ2M0dEj86KT4XRuXnI6GTTIqMHBl17Cl2+/HYf37QPLsm/YCJhjWTidTjhLIxczPSSTySQGhoYQTyQWoYTVdLW3Y8v69VDNoCJJCEE2n8drp07hvNdb1cGqBAGdbjcsZnMluJicjmEYBCYm4BkervLwYBgGDpsNHR0d4GQqPCYSCQx6vcWRC4apckutkupub6/qhAuiiNGSSmu5fFMxG43YumEDbJOCwnoQQkAARJNJxFKpeRmAJYRgIhjEkNeL/Cyib4JSiU3r1mGVy1XV8ccTCRw+dQrDPt+8q+/OJp8+uU7mO0+tRoMut3va8ydSCmjSy8h8cTnBsiz0RiM+e//9uP7mmxuWvV+4IOPwPAUZW2iQsZg002AIIXjyiSfw1TvvxIjHsyiW2YuJ3WaDu2ToVavzLHfCoXAYQ14vMovwsLS1tGBbXx9MdYyxyn+LJRI4dPw4AuFwZQQCqC3WU14FPurzYXR0FMaSPwYv06sik83C4/UiGAo11JGVTcfsNhsCwSC8w8N133bL522327Fl/XpZQlaEEEiEIJRIIDmHuozGYhj0eJCqMQI0GYNWi4v7+mAxGnH87Nm6Zm7zgV6nQ6fbDV6pxNDwMILB4AWzEyif12wyodPlgkQIhjweRGOxFWlhsNhwCgVYlsUtd92Fj33uc9DL7HxpkDF3aJDRILlcDnu++108fN99iL8B3ElZlsVFfX1Qq1SyOk9CCMZ8Pgx5vRewdNPZ1teHNd3d00YgakEIQa5QwFgoVAw8ZP5OQkhTVt2hcBhnzp2rnEcODOQv72IYBmu6unDxhg2y19AURBGjoVBT0ycDg4Pw+f2yOs/yseVyLsTjaXL5FqqjX4w834hcd+ON+Oz998PpcjWVfuGCjFfnKci4eMkFGXThZ4PwPI+P3nYbXhgYgFamT8NyROB5aNRq2Z0SwzAIRyIXplA1cJW8ZuSUl2EYZPJ5QMb6iclpmwkwgKI/SbP74pvpigghcJbWicglVyg0vT4jVPLekPM7y8fOh26A3Dyn/v9Ky/ONxjcefRQP//CHTQcYC0m5vc/1sxRZNkHGAw88gEsuuQR6vR42mw27du3C6dOnF7wcRrMZGq12wfOlrCwWelfOouwBWuI7jygrm561axe7CBQsoyDjmWeewSc+8Qm8/PLL+J//+R/k83m84x3voJbIFAqFQlkBkDl+libLRozrt7/9bdW/H3vsMdhsNhw8eBBvfvObF6lUFAqFQqHMFar4ueSIlhZfWiyWWY/JZrNVe9xj1NacQqFQKJQFY9lMl0xGkiTcdttt2LlzJzZu3DjrcQ888ACMRmPl41oGC4AoFAqF8saCLvxcYnziE5/AsWPH8P/+3/+redw999yDaDRa+XgXeFslhUKhUCj1met6jKW7LmPZTZd88pOfxK9//Ws8++yz6OjoqHmsIAgQZPpV1OPsyZNvCJ2M5cbSvL1mZ6HfOhbl+izRNyvKG4MXnn4a23fuXPL+SkWoQdqiQwjBJz/5Sfz85z/H73//e3R3dy9o/oHxcXz+1lvxjo0bkV3h0r8MwyCdySDZhEQ4IQTW1tam8gQARQ3/ilqcHRyUPWRICIGa58E2+RDiSjoZclPbWlsh8LysNOXrUzZ5k6sH4hkZkZUfUHxkqZTKyu+Ui7OtTZaHCzCpHSyQWdtkuEXIk3LhePi++3DtpZfileefX+yivKFZNiMZn/jEJ/CjH/0Iv/zlL6HX6+Hz+QAARqMRarX6guWbTqXw/YcewiNf+xryudwbwr9Ep9Fga18f2qxWZPJ5hBIJ5OtIWFfJbZf8NBqi5Neh02rR6XZDp9UiFA5j0OOp8geZjbLctt5kwkgwCLNOB61KVVNWvEw6l0MokZAtNqXkOHRarbAaDEhlsxgMBBCtI5tdVuq0GQzY3tODqzdtwoGTJ7H/2DGIklQ3ODLp9bhq+3Z0O53w+nzYe+AAJuqInrGlDv7KLVtw1bZtUCgUGI9EMNGgw2sun0coHofYZJtvczhgNpsbkk8v/81kNKLT5YIgCPAHAkX59AtkUFjO09baCldJOn/M58PI6OgFMYijLDwnXn0V77/ySrxj1y58/sEH0d3bu9hFmpH5WFOxVNdkLBtZ8dnehv7v//2/+PCHP9zQOeRIxIqiiCf27MHX774bQb9/yVbgfCLwPDatXTvNpIoQgmQmg3AyOa3DqWUc1lCes5hUSZIEn9+P4ZGRaS64tYzDAIBXKNCi10OYxQQpWyggFI8jO4tZ12ywDIOOlha0mc1Vb/eEEERSKQz6/UjP8vuNGg26bDZop0zfJdNpvHD4MI6eOweWYao6NwbF63Plli3YuHr1tDo5OTCAZw8dQjKdri5nycxvy5o1+OMdO2CaolCbzecxGgohNiVd+byiJCGUSCA1D+6jZeKJBIY8nqKB3hQjOGB247CCKGJ0dBSjpZeK+bgPy+3HWApotBpN1d9zuRy8IyPwBwJU8nuFwCkUIITgpo9/HJ+5915YGhxtXShZca/3JRgMjXsLzXyuBFyuHUtOVnzZBBnzQaMNplAo4LqdO3Fk//43xEOGZdmG7LYlQhBLpRAtWYE3aoE+E43YbQNAvlDAyOgoxkqdDAC0WCxwd3TUtEAHAA3Pw6LXVwICUZIQTiSQbKLztBuNcLW2gq9xfQgh8EejGJqYqLx9q3ke3TYbTHVUYiciETxz8CAGR0cBFEdoLunrwyV9feBrOEbmCwUcOnkSLx89Wsmz2+nEu6+4Ah02W808E5kMRkMhpHO5yptUOJlEfIbgYz6YyT69EQt0oLgd3TM8XGVp3yxqtRpdbjdMRmPN41KpFIa8XkToGqwVA8txUKnV+Mnevdi0fXvd42mQMXdokDEDfp8Pl5S8MFYyjtZWtJrN6HG7oZEx5SRKEl46cgTxZBIRmT4lLRYLNBoNHDabrPUXmUwG/okJmI1G6GV6x+hKJm+JdFrW0iiNIMCi1aLVYIBGxgJiUZLgi0Sg5DhYDQZZaxKGxsYw4vfjot5e6Ke8YdcilU7jnNeLttZWrO/qkmUSd9zrxUQshng6vSDTBJIkITAxAYkQ2K1WWR4w44EAzg8MNJWv0+GARqNBa0uLrDoZ9HiqglzK8oZlWdzz4IO45c476x67cEHGC/MUZOxcckHGslmTQZl/1CoVLmpC359jWYyOjTU1V6/RaNBeWhAoB5VKBXed3USzkWhyoS7HsnBbrU2la68hEleLzrY2dDYR4GrUarxl+/amjN44lkUsnV6wETuWZWGvM8oyG+o6o1e1sFqtsoLpMs2koSxdluJuk5W8JmPZ7C6hUCgUCoWyvKAjGRQKhUKhLCorVyeDBhkUCoVCoSwqKzfIoNMlFAqFQqFQLgh0JINCoVAolEWEEAmEzE3oca7pLxR0JOMNCsMw0Gg08EejyMgUpcrm81jV3Y02h0P2Su1oLIZz588jLVOLQaVUwmowQCdzdwHLMDDrdLDodLLksQkh8Pn9+K9nnkH/8LCsldsFUUQ4mURM5pbQsuhZKJFAro7C6lTGQyH8v9/9Ds8eOlRXnXUqrpYWXLFuHYwytswCQDQaxemzZ+EPBGRdn2brBCjKzq9ZvRomk0lWOgDwDg/D4/WiIOP6SJKEaCwmO6/lhsDzuHj9emzbuHFOO3iWA0tTtXnlGqRRnYwZIITgjt278cSePeA4bpri5HLHbDKhq7MTAs9XggSNIMCs00FZw7+hIIoVMatys8nl8xjyeBAMhWSXw26zwdXeDmUNsSklx8Gs10PD8xV10VxJsbNWcMQAMGg0MGq1VfLi0VQK0VSqZqcYi8cx6PEgmUxWxNg6bDZctX077C0ts6aTJAnxTKZK7IthGOhVKmgFYdaAjBCCTD6PWDpdtS1YpVTCoFbX9PGIJ5N4/vBhnDh/vlJWg1aLd+3ciU29vTV9WQSFAhpBqEieMwBOjYzg1YGBmtd2JpEqjVqNzjoCV3Opk8mQBRCCm0k4bCXCsSzWdHdjY28vWI4DSlspT/b342R//wWTdF9MOnt6sOepp9DZ01P32IXSyRgc/P286GR0db1lyelk0CCjBgdfeglfvv12HN63ryLVvJzRabXo6uyEXjd7Yzao1TBqtVVvmJIkVTqC2UgmkxgYGirKRsuAZVl0OJ1wOBxVeXIsC5NWWxy5YJgZfUjSuRxC8TjyUx6EWpUKZp0O3AzmXIQQSIQgnEhM089IZzLweL0IhcPTlF7Lkt/ru7txxcUXwzBJwZMQgmQ2i3gmM2tHybEsDGo1VEplVZlyhQJi6XTNkQutIECvUlV1iNlcDq8cP45XTpyYtse+XHan1Yr3XHEFVrW3V51PyXHQCsKMowhSSVb8yOAgjnu9VUFPLbntqd4jmimjIlpBgFmvl10ntbhQkvaJRAKDXi/i8fiKVvztbG/HlvXroZ4hACaEIJfP48ipUzjv9S77a8CyLPRGIz57//24/uaba77YTGYlBxnPPvssvvnNb+LgwYMYGxvDz3/+c+zatQsAkM/n8YUvfAH//d//jfPnz8NoNOJtb3sbvv71r8PpdMoqFw0y6kAIwZNPPIGv3nknRjyeZWlfLfA83C4XWltaKg/mWjAMA5NWC71KhUQmg0hJRrwW5fOGwmEMeb3IyBTAUiqV6HS5YG1pgVGrrbzt1iorKWZcKaOS42DR62tKf08mXygglEgglkxieHQUvvHxup1K2VV0+4YNuGTDBhCGmTYCUfN3KhQwqtVgS+kanapiAOjVaqiVShzr78fzr76KbC5Xc4B0cmD0rje9CY6WFmgEAXwDbqOEEKRzORzo78fpkZGGjcMqpmNWK1zt7TBotU3VyWweMLOVtWzONzIyIlu1VK/TodPtBq9UYmh4GMFgcEUHF7aWFmzt64PZYKhpJFj+WyyRwKETJzDm9y9cIecJTqEAy7K45a678LHPfQ56mYHCwgUZT89TkPHWhsv65JNP4oUXXsC2bdtw3XXXVQUZ0WgU73//+/GXf/mX2Lx5M8LhMD7zmc9AFEUcOHBAVrlokNEguVwOe777XTx8332ILyMvA4vZjN6eHtmW281CCMGYz4chr1d2WrVKhWve/GbwU972G8kTaE7JLxiJ4OmXXpI9JcYwDK6+7DLYm7C1b5aCKOJ3zz2HqNzRIobB1du24YNvfeuso0IzQQhBNJHAl/71X5Fows9kW18f1nR3y06XzecxFg7LTidJEk6ePo1Ygy6zZSYHFCs5uACArX19WNvd3dDLRhlCCMKxGP7nhReW3WjudTfeiM/efz+cLldT6RcuyPhfGAy1/Y3qnyuJrq63NVVWhmGqgoyZeOWVV3DppZdiaGgIbre74XPThZ8NwvM8PnrbbXhhYABamd4Zi4nRaFywAAMoNtawTD+TMhajsWqdiJw8m/19/mCw6TU3CxlgAEAylZIdYADFKZDNvb3F6yQjHcMwGPL5mgowAKCjSf8fuQuRy5TXachlclCxkgMMAHCV6kTO/cIwDPzB4LILML7x6KN4+Ic/bDrAWK7EYrGqz3ytKYpGo8VRbpmLrmmQIROj2QxNHUdNyvJiKXoZrAToVV16zKVOltt90tOEL9NiUZ7ym+sHAFwuF4xGY+XzwAMPzLl8mUwGn/vc53DDDTfIHiWhOhkUCoVCoSwq86f46fV6qwIBQYaD9Ezk83n86Z/+KQgh+N73vic7PQ0yKBQKhUJZIRgMhnlbP1IOMIaGhvD73/++qfPSIINCoVAolEVl6XmXlAOMs2fPYu/evWipoRFUCxpkUCgUCoWyqMxdVhyQlz6RSODcuXOVfw8MDODw4cOwWCxoa2vD+9//fhw6dAi//vWvIYoifD4fAMBisYDn+YbzoUEGhUKhUChvMA4cOICrr7668u877rgDALB7927cd999+K//+i8AwJYtW6rS7d27F1dddVXD+dAgQyZnT55cVjoZlPqs9G2LABZFRO4NcV2XGXOpk+VWny88/TS279y5THbFLPx0yVVXXVWzTuervukW1gYJjI/j87feinds3IisTDXLxSQYDC74w8Fht8/qCTEb5b34zehAlNM3Q4fDUSUR3lhexRtwpDR8KFc4jBACSZJk14tep0O73S47T4Zh8OLRoxBl5kkA9LpccDeRJwD0ezxNtT2NIDSsEDoZhmHgaLKsQNHTRG5+QNG0rdk8F5qT/f2QJEmWKqpECNrtdvANSnEvFR6+7z5ce+mleOX55xe7KA1ADdJWBM2ot6VTKXz/oYfwyNe+hnwutyzM0qZKO8uZP5sv8vl8Y1LdxR67Iu2s1+mgEYSKQ2ddCXQU5ba1ggBRkmRJdQtKJYxqNRiGwdGzZ/HC4cPI5vN1ZMUBo06HP3vXO3HF1s2Ip9I41j+EiUhtp86pEuiSJFWZhcnpoHwTE3j1xAlE6riDsiWRsiu3bMFV27ZBLQhQ8zxUSmVDyp95UUQqm0VeFHG0vx///cILiNQRu2IYBhzHYWNvL9Z0dcnuuMt1wrIs/JEIPBMTKMgUgUqmUhj0eBCLxSrta7ayEkJga22Fq6MDHMc1LJ8OACqVCl0lU7iyqV5KplnbYqBVq7F53Tp0trdDImRWE72yKuiIz4dXT55EPJlc4JLOnbLB5Tt27cLnH3wQ3b29stIvlOLn+fO/gl4/N/2leDyJVauupQZpi4mcBiOKIp7Yswdfv/tuBP3+ZTFUWM+kajFIp9MY8noRjkRmDDZmM6kCimZtJq12VkXPmYzDgKLpWDSdntXyXMlxMKjVEKa8mdUyHWMZBgqFAv/nrX+Ed135JgiTAjdCCPzhKI6dG0QiPfMo12xmbo0Ywc0EIQSDIyM4fPIkMlMU/cpmflvWrMEf79gB0xSFWpZhoBEECArFNO+KsllZKptFbkpZC6KIl44exf/u34/clGCsXD9rurrQ19tbdX0aYbY6KYgiRkIhjIZCst7TCCGIRKMY8niQnjLyWG6HxtJ9op1yn9QyggOKIxfujg7YrNaqdkkIwUQwiCGvF/kmVUsXEovRiK19fbBaLFUy4+U2EY5GcfD4cQSacFheanAKBQghuOnjH8dn7r0XlgbVemmQMXdokDEDhUIB1+3ciSP79y8rLwO1Wl15s1pqTLXlbsRuGyh2iEatFobSiAPQmAX6TPbpLMPAoNFAXccbJZZM4oWSfTpQ7JTeevkleP/b3wKTfnYTI4kQeH0BnBjwIJcvBji5kuFXpo7h12RLezkURBGnBwZw/OzZyihbt9OJd19xBTpstpppFSwLrSBAwXHFoArFYKjeSFAqk8HvDxzAi0eOVN74OxwObFm/HnqZU0+N1kk2n4dnYgKBOqM3UyGEwB8IwDM8jEIp6Gz0Pplqac8wDJxtbWhva6s5QiNKEnw+H4ZHR5eFFHe73Y6tfX3QqtUAgHQ2i8MnTmBodHSRSzb/sBwHlVqNn+zdi03bt9c9fuGCjP+apyDjT2iQsZg02mD8Ph8uadJ3YTFoczig1WjQ2tKypOeFCSEIhkLIZrOw22yVuexGUCmVWN3WBpVSKWu+nhCCVC4HEALNDJbWtYgnkwhEg7ji4s1ot9fusCdTEEX8594XEU+nkZS5fsdccqCVSyabRTwahdNqxfquLlm/k1cowDJMcapIRp7j4TB+t38/2qxWWC0WWeXV8DyUHCe7TsYjEfSPj8vKCyiOTI77/VAqlbLvk2g0ilg8DpvNJmuEJp/P4+Dhw8viJYVhGKxyucCyLPo9nmURHDULy7K458EHccudd9Y9duGCjF/OU5Dx3iUXZNDdJSsAu9UKdektZCnDMAxamxR0ESUJhiZ+I8Mw0DYpq9tmbcVbdmyVnU7BcciLBdkBBoBp0ymNohIEXLJ9u+wFt0BxtKUZLAYDNjXpDyEolVA3sVaomTRAceTM2eSLQ9kDQi7K0ujMcggyCCHo93gWuxgLwlJ+EVuJ0CCDQqFQKJRFhJC5i3HNXczrwkCDDAqFQqFQFpWlJys+X1CdDAqFQqFQKBcEOpJBoVAoFMoiMnXLfLPnWIrQIINCoVAolEWFQK7B2cznWHrQ6ZIlQovFgjWrV8vWuBAEAcom5H4lSYJvfBxnzp1DvEkpb7mIogjvyAjOnT+PdDotK61ECE6PjMAfjS5YxM4xLPz+MFKpjKw88/kCVjscWN/RUVPLYyosy2Dj+m5cflkfWizytqCZTDo4e+wwO4yyVs8XRBGnR0Zw6Px5xGXWSaJJeX1eqcCqDgfcThuUCnmKoA5nC977zp3o6XTKSqfheWzu6pJdJ1X3SR2106nwCgUu27wZ61atkrXrh2VZtDud6OnuhlqlkpWnvaUFO7duRXdHR8PCbm80VvL23KUI1cmYAUII7ti9G0/s2VORpb1Q6HU6dHd2QqvVVlT3YrEYBupIFCs4Du1OJ9ocDgCNb8sihCAciWDQ40F2klJki8UCd0cHVDIfao3mOVUQCQDsNhtc7e2ygyQNz6PLZoOpCT2JRlBwHHRqNZSTOiNBUMJiNkAQZi+rKEqIxhKIxVIVGfGCKOLkyAgG66jGru5ux1t2XgyjQQuCokiV1+vHa0f7kUzO3vmr1QIu2rgKnZ2OyneFvIiAN4h4aHYZaEIIPIEATgwPI1cogEHxPajLasW6jo5pypuTyeRyGA2HZQclLMugp70NazrbwZU6XUIIxgIh+AIhSNLs18dg1KJ7bQf0Bg0kiYBlGXhH/fj9c69ifCI8azolx2GN04lVdntFUbWROpntPrGYzeh0uWreJxzLwqzVQjvpmEYFrmytrXC7XFUaMuN+P7wjI1X3zlQMOh0u3rABTput8hyJxuM4dPw4fBMTNfN8o9HZ04M9Tz2Fzp6eusculE7GuXM/hV4/N4XmeDyF1as/sOR0MmiQUYODL72EL99+Ow7v21eRap4vVCpVRU57sqQv8PrcWiAYhHd4GLlJapEMw8Bhs6Gjo6Mhb4/JxBMJDHk8xZGLKZ4O5f38bQ4H2p1OKJswqJpKLWnnMizLosPphMPhqHQ8jWLSaNBpszWtgzEVjmWhVakgKJXT5LbLaDUqmM16KCa9gRNCEIunEIkkpnVa5WAjlcvhuMeDsXB1h+iwWfCWKy5GR5t1WjsodroEZ88N4+SJwYqKKAAoFBzWre3E2rVuMAwDlp3cforVm0lm4fcEkU5kJv2NwB+N4pjHM+NIBINinZQ75slv/flCAb5IBKEmRr46bK3oW+WGwE9X9iSEoCBKGPYFMBGqdjhWqQV09TrRajPNcH0ksCyL46cH8ezLryGeeD0oZxgG3TYb1nV0QDHlPqlXJ4lEAoNeL+Lx+DSdi8p9Yrejvb296j5hGAZGjQbGkkz51DwZAKFoFIdmkOo2Go3odrtn1LspG+qNjI5ibHy86jmkEgRsXLMGq93uSnA6OR3DMPAFAjh04gSiMkdiVhIsy0JvNOKz99+P62++ueEXm4UKMs6e/Y95CTJ6e/+UBhmLSTMNhhCCJ594Al+9806MeDxztsxWKBTFTrUBt8jyYqBRnw+jo6MwGo3o6uwEX0eCeSqZbBYerxfBUKghcSCO49DR3g5HHcnvWjRqUlVGqVSi0+WSpcZYfvu2GY1wt7Y25dwJFOtAUzIPa9Q/xGjQwmDQIJPJIxSOQRRrB6CVTiaRwNGhIUgs8OYdm7Cht7PSWc6GJBGIoojjxwfQf34EXZ0ObNzYA55X1G0/DMMgHk4i4A1hIlwMLiZiscq1q4WgVGKDy4V2sxkT8TjGm5iqajEacNHqLhh1mkrwM2NZUbw+6WwO3lE/kpkM3N0OtLmsAGrfJ2VH2/2HT2PfwRNo0emx0e2uW5+T6+TY0BB8oRCGhocRDAYbu09Ytnif2O0wajQw6XQVU7rZmGo6JkoSutxuGI3GWQPbyWnzhQKGPB6Ew2GsW7UKG3p7wbLsrCZnQHGqkQHQ7/Xi6OnT07xuVjKcQgGWZXHLXXfhY5/7HPQyO98FCzLO/GR+gow1H6RBxmIylwaTy+Ww57vfxcP33Yd4NFo/wQxotVr0rVsHVuYIRDnYaKbDD4ZCONvfXzlPo7Asi019fVCpVLIV8sZ8Pgx6PLLVDnmlEpsuuqipUZRVNhscZrPsdAqOa8oJtVkIIdCbtWjrKcqUN1qnxctIJr3NM7N22DPlefDIGfz+hVdl1wnHsmi3WJpqext7OtHT0TZtBKJeWVklC4VJmNUYbzZEUcLwmTFkEtm6HfbUPE8MDODfn3yyqFYg8/r88ZvfDH3JyK9RJEIQT6Uqo0Jy0nIsC4fJBAXHyc7z4NGjOPcGUfYEgOtuvBGfvf9+OF2uptLTIGPu0IWfDcLzPD562214YWAA2imulo1i0OtlBxgASsPhzVVVtBQQyY0lBZ6HepIpmRxCpeFnuXlqtdqmp2ksTdaJkuMWLMBAKR+tUSO7Thnm9XZQ7Hzl5XlucASA/DrhS2+CzeC0tlTybxSGYcAqOdkBBlBc85FJFN/S5aRkGAZnSx2v3OujUath0Onkl5VhkM7lmvqdvEIBpaL2KNZseY404fuyXPnGo4/i4R/+sOkAgzI/0C2sMjGazdBotUi+gec3KZSVCNPAtN6y5w3k29HTpK/OYrCSdTLoSAaFQqFQKJQLAh3JoFAoFAplMVm51iXLayTj2WefxbXXXgun0wmGYfCLX/xisYtEoVAoFMqcKE+XzPWzFFlWQUYymcTmzZvxyCOPLHZRKBQKhUKh1GFZTZdcc801uOaaaxa7GBQKhUKhzB90uoRS5uzJk03rZCwWS3UYjbLSWV7tTqL3yYrihaefXj7PPkLm57MEWdFBRjabRSwWq/o0S2B8HJ+/9Va8Y+NGZJs0hgqFw8hms001/Hw+L3vejRCCFhkKmpNJZzJN61047HbZ2goMwyAWj1dJqMthvInAjwDI5vMoiGJTdVJWmpSbMjoRB5GanENt8o69+KJeKBXyxJsYhkGm1O6aoX/YB0lmm5UIgZgtIJctt/fG82MYBmZHyWBQRpMnhGDL2rVQ8XzjiUr5JZLJpr1BTFpt0RpAZrpMPo9MPi87P0IIetxu2enmCleSppfV9qakbYaH77sP1156KV55/vmmz0GZO8tqukQuDzzwAL70pS/N6RzpVArff+ghPPK1ryGfy83JvySbzeLw0aOwWa1wd3SAq6PYN1lGeCIYhEajKUoQGww1FQ3LD3V/IADvyEjTncTps2dh0OvR3dkJjaZxNboWiwUGvR7Do6PwjY/XVJks/63FZMLFGzagxWRCKptFKJGAWOdaMyiqH65tb0d3SaY9mU4jW8NIajKZXA6xdBrDoRBa9Ho4TKa6fjCEEEiEIJnJIJvPg2NZ6NTqhiXNdVo1TCYd8sEMOI0CnFZZuQ41f6uSg8qqAadRQkwXkA0kIeUaN+5b2+OCy2nDi68cw6vHzlV+y4x5oRiAmTQabOzshFmrRTSVwmgohHwDZoEMAL1ajVQijaOnzqPDYUWL2VBT+bP8t/FgGCfOe5DMZLGq24mLLloFpbIB4SkGUGh5dGzpQGu8FaMnfUjWMIib/PtDiQSShQLec/XVOHX+PE6cO9dQcCQIArrcbqRFEb5wGBa9vm47KP8Kd2srOq1WFEQRhwcHcXJ4GGhQjZUQAl84DI0gwKLT1W2zEinK0h87cwZnBgfrnn++UCqVcHd0wNrailQ6XbEZaOR50NraWnlGjvl8GBkdbWqk6cSrr+L9V16Jd+zahc8/+CC6e3vn+rMuCPMxELFEBzKWr6w4wzD4+c9/jl27ds16TDabrXJQjMVicLlcDcmuiqKIJ/bswdfvvhvBOg6azcBxHJxtbXA6HNNU/8qGSMOjo/D5fNNuLlPJw2SqDXQ58IhEoxj0eGTbqdeitaUFnW63bKXBdDqNIa8X4UhkxoeLVq3GxRs2oKN0HcoQQhBLpxFJJqelKYsmrbLbsaa9fdqDPV8oIJHJoDBLh5grFBBLp5GbEoywDAOb0Qir0ThNBbRchlQ2i9QM3g9KhQI6lWpWG3GViofFrAfPTzFmYgGFVglWpQADZnrkyDIQWjVQGoRp5SnEc8hOJEFEeW0zFInhDy8ewbmBkRnrRCMI6HO50GY2VxuSEYJgLAZfJDLrA18rCNCrVNNGsrRqFVxOG/RadZWHSTm4iCSSOHZuEMFotcidQsFh3bpOrF0z3QiuDKdRglMrpl2fxEQCoyfHkE1Wj46V75N4Oo3RUGjaqEA6k8HRM2fQP4s0vkKhgLujAzarddq9oBUEmPV6cFPu6fJ57EYjVtntRV+VSURTKRw4dw5DExOypd8NajVMJVnzqfUFQnBmcBDHz55FronRj2YoW9W32e3TRiIiJWfbqYaJ5d9sNBjQ6XZDO+WlJpfLwTsyAn8gIPv6AEUPE0IIbvr4x/GZe++FpbW1oXQLJSt+6ui/z4us+LqLPrTkZMVXdJAxlUYbTKFQwHU7d+LI/v1NNWg58DxfifbL+TRi7QygMiKiKHX8qXQag0NDiM5hWqgWLMPA4XCgw+mULY8ei8cxODSEZMm+XqlQYNPatejp7KzpvipKEqLJJGKTAqY2sxl9LleVlfZUCCHIlYKN8rSGRAhiqRTSdR62So6Dw2yGRaer1Ekml0OygakulVIJ7aROVqlUwGLWQ62u7RTLcAw4HQ9OKD2UGYA3q8Gb1WBm6Fgrv1MiyEUyyIVSspdAeEf9+P3zr2I8UJwWU3Ac1rW3o7uOMV5BFOGPRhGY1M5USiUMavWsQVYZk0EHt9MKvuSCmcnlcbx/CCOBYM10VZb2JdMzVuCg0PJ1r09oJAzfmXEUciIYFOtyJBSa0YV2MtF4HK+eOIGxQABA8ZnjbGtDe1tbzWF8BoBBo4FRq60Ylxk1GvS2tcEwg8vqZHyRCPadPYugTEVhlmFg1Gor52cYBt6xMRw+eRKJVKpO6vnDZrXC1dFRqd+ZIITAPzEBj9dbecap1Wp0uVwwmUw1z59KpTDk9SLS5Lo4luOgUqvxk717sWn79rrH0yBj7iyrICORSODcueJQ78UXX4yHHnoIV199NSwWC9wNzDU22mD8Ph8uaWubt3I3glajgcVsRiAYREbGmg+WZWG32ZDP5zERrP2gni8UCgW2bdkie90FIQSZZBJEkrC65CbbcFpJgsDzsBuNsnxKCCEYCQaRzudnHIGohUGlgs1kQjafrzt1M5XudgdUAg+tVp7BnGDTgLeooTQKYBWNz0dLBQnJgXD9A6dACMH+/Sfh94XQbbPJ8o4pd9YqpVKWAy4DQK1VQZQkDI35ZQ2Dd/c4cfnOjWAFBVhF4+1PLIh47lcHkIinEE7WnkaZysDICIbHx2Gz2SDIWLfBMgyu3LABRrUaLXq9LJO43x87hqFScCMHIklIxmIYCwQwEZbfHppBrVbDYjKhtbUVmjpB1GREUcS43w+FQgFra6us+2TI68Xo2FgzxQXLsrjnwQdxy5131j2WBhlzZ1mtyThw4ACuvvrqyr/vuOMOAMDu3bvx2GOPLVKp5odkKlV5y5eDJEkY8/kuQIlmp1AoNLVvgGEYtJVsseUuRlUqFFjf0dFUngVJkh1gAMUFds2kAwCtVgW1qvboxWwILfIfNqyCfX0xhQwYhsGqdgdMnFr2pC6vUNR9M58JAmB4fKKpxYuJZBoKrbwFmgDAKTjEcxlEZAYYAGC1WMDICIjLSITA3doKpczFiwzDwKTVwjsxIXsdQkEUcfTMGVlp5grHcXA3YUJWnjJuBjnBzFQWygxRDivZu2RZBRlXXXXVkr2QFAqFQqE0BdXJoFAoFAqFQpHHshrJoFAoFAplxbGC97DSIINCoVAolEVkBccYdLqEQqFQKBTKhYEGGRTZmA0G2IxGGNRqWZLIDMNAUCpfV2KSgUmrhU4QIMjYKgkUV9unm5Qq16vVMGg0srZnAoDWrIFjZyfMm+1glI3fYhIhGPUG8Or/HEXYF5GVp5gpNLfwi2XQus6G1Vf3Qm2St2JfY1Bj7UVdsLVZZKVTKBXo29iNiy9eA5VKppS3CLz2/ElMjITkyZXnRPQ627C+21VXy2MyhJCm2w8APH/yJI4ODc0qDDcTeVHEeA3Bs1qoeR47t25Fd0eHbLnyZsnn8zh99ixC4bCsOslks+gfGKjSy2gESZIQnYN/1FxUmy8YK9i7ZFnpZMyVRvc8E0Jwx+7deGLPHnAcB1HGA2Ilo1GpsGntWnRN2koqShLCiQSSdbZ66lQqmHU6sFNUCeuhFQSsdjjQotdX1CHLW1JrSVxLkoRALIbxaFT2jiStIMBpsUAjCJU8c4UCkuk0CjUeUEq1Ehvesh69O3srv1EqSIgc8SF2NjhrEEAIQSSWgHcsgGwuX9mKal9lw9rLV0NrnH1Lq5QXkQ2mUIjL7wgFqwbaDiMYBVspm+/4GLyvDCGfnn17Ka9Swupugc6oqVyfZCKN82dGEA3NLiLFsgycLhtcq4reNsXnooRTpzw4fdpTsyPmOW5awGeyGtB7cTcMFt2s6YgoIRtIIxdKg4AApBh4nhzwYnBsdiXfcnARSiRkBQizoREEXNLTg1V2+6ztXyIE58bGcKC/X/b2XiXHwazXQ8PzlTqJxuM4dPx4094qzWDQ69HpdkOn1c56TKFQqFgOlK8/x3FwtbfDXkMIjhCCcCSCIY8HmSa3lgNAZ08P9jz1FDp7euoeu1A6GccP/RB63Rx1MhIp9G29acnpZNAgowYHX3oJX779dhzetw8syy7NCHgBUCgU2NDTg3U9PUVp5xkektl8HqFEAtkpD0c1z8Oi08kSeQKKGgzdNhucZjOAmfe25woFpHK5KqEsQgjCySTGwmHZnQOvUMBpNsOo1U7zhin/O5PLIZnJVL1lshyL1Tt60Pf2Pih4RZUCZfEwgkIyh9DBMaSGq9VYE6k0vKMBJFLTJeDLv7nzIhd6tnWDV72u1UBECblwBrmwfOl4pVGA1m2CQq2skvgGigqZkihh+KAHo0dGIBVev7acgkNruxlGq76qfMXfWezYQsEYBs+MIJWsFpSzOszo7m2Hkp8uS08IQS6Xx9Gj5zEwOFbV8XMsC4NaDTXPT6uTshqvo9OKnk2dUGmF6nOGMsgGUoBU/YgrVglBKpPF8f4hjAWrRatma8vzQYtej8tWr4aj1K7LDAeD2Hf2LKIytXI4li2O8qlUFSXUMuU68QUCOHTiBKIyVUSboeI90tICd0cHBOH1OpEkqaJmPNuLmyAI6HS5YJkiaZ9IJDDo9SIejzelwsyyLPRGIz57//24/uaboWxQ94QGGXOHBhl1IITgySeewFfvvBMjHs+SHZK6EDAMgx63G5vWrgWvVNY2DkOxAyibmzEMA4tON82joR4sw1TMo+qNepQ7i2wp2IinUhgJh5GRObzNsSzsJhNa9dM7z2l5luo/XfIwab+oHZvfvQUak7pm2vIDPxNIInhwFPGxGIbHAghFG3jwM8UOvveSVXD1dUBK5JENTu886/5OtRLaTiN4g6qmWVm5vPlUHoMvncfE2QAsdiMsTtM0f4yZ0gHA+EgQQ+fHoNGqsGpNB7R69bSAZmo6hmEQi6Vw+MgZ+MfD0KlU0ArCtM5zKgxT9Hxxr21H53onkJGQGU+C5Gu/FFQCo1gcx84NIRCJIpRINC3A1gjlDtLV0oJLe3shShL2nT2LsXBYVuc5Wbp8qs/OVCRCwADo93px9PTpOY0CNEq5PG0OB5wOB2LxOIa83iovqVrodDp0ud3glUp4hocxEQw27VnCsixuuesufOxzn4NeZue7YEHGwcfnJ8jYtrvhsj777LP45je/iYMHD2JsbGyaTQchBF/84hfx/e9/H5FIBDt37sT3vvc99Mo0maO7S+rAMAze9b734W3XXos93/0uHr7vPsTnMB+4XOBYFu+88koYdLq6D3ng9TdMNc+j3VKao5e59oJXKHDp6tVQ1nGnrcqTYSAoFBjy+zHShIyymufR43A0PI1TPkYtCLh89w609FjrdtiT0wktGsClwdE/HGn8gUkAMS/izMvnoIUSao18JVGVXQet2zitPLXKq9Qo0fPmXlhMehBRknV97O0tsDlbwLKvdwy1kpfT6fVqbN28BkdeOQNJaixPQorTIEMnh6HKAgbd7EP1M+Vp1uvQbm/B4fMDF1zsr3z+4VAI3pdfripHo3lzLIs2s7mu+2qZ8sjjKpcL4UgE5zyeZooui/JvGR0ba0r+O5lM4tiJEwDkX5/JvPeGG/DZ+++HswlF0gVlEcS4kskkNm/ejI985CO47rrrpv39wQcfxHe+8x08/vjj6O7uxt/+7d/ine98J06cOAFVDd+oqdAgo0F4nsdHb7sN79+9Gzs6O5FcgKHHxUSr0cAowyOkzFwkew0yLNOn5hlosj50KpXsdSJAcYqkpcdayb9RGJaB70xzMvCCim8qwAAA3iTPQwUoSbInc4BUP4iaKW058pR1fRgG0XCiocBtJhoNMKbmOTQu3ydkLkzuMOV2nrxCIWvxahmWYTAyPi473WIwl+tT5huPPorrP/rR+SrSBYWU/pvrOeRwzTXX4Jprrpn5XITgW9/6Fr7whS/gve99LwDghz/8Iex2O37xi1/g+uuvbzgfurtEJkazGZoai5oolIZYevYJ885y+4lL0NJi/nlD/MgiPWvXLnYRFoVYLFb1aXSKajIDAwPw+Xx429veVvnOaDTisssuw0svvSTrXDTIoFAoFAplMSHz9AHgcrlgNBornwceeEB2cXwl00273V71vd1ur/ytUeh0CYVCoVAoi8k8Sn56vd6qhZ+Td/gsBnQkg0KhUCiUFYLBYKj6NBNkOBwOAMD4lDU84+Pjlb81Cg0yKBQKhUJZRJaa4Gd3dzccDgeefvrpynexWAz79u3Djh07ZJ2LTpdQKBQKhbKYLIJDWiKRwLlz5yr/HhgYwOHDh2GxWOB2u3Hbbbfhq1/9Knp7eytbWJ1OZ5WWRiPQIEMmZ0+efEPoZFAuLG8gDbxlA62TlcULTz+N7Tt3zmlb/UrmwIEDuPrqqyv/vuOOOwAAu3fvxmOPPYa//uu/RjKZxC233IJIJIIrrrgCv/3tb2VpZAB0uqRhAuPj+Pytt+IdGzcim8nUTzDPcKV98bL1ClAU75FLPJnEcGkV8UI9fMPJJGIlWWU5ORJC0NHS0lSe0VSqSpa84TwlgtFXh0EIkXV9CCHo3OKGkm9M1rgMwzBIp7KIJ+TJTpfJBuXLjwOAUi+A08oraxlWyRe3TMpos4QQWKwGKJXNvf9MRGL1D5ohz3XuDgiK5n6nonR/ybkzCSEQRRGSJMm+vzL5vGxvk3Kea7u766q2rhQevu8+XHvppXjl+ecXuyh1WYzpkquuuqry/Jr8eeyxxwAUnzlf/vKX4fP5kMlk8L//+79Ys2aN7N9GZcXrkE6l8P2HHsIjX/sa8rncgpulKZVKdLpcaG1pQSqVwqDXi1gsVnxwz1J1Zfldm9UKV3s7OI7DqM+H0dFR2c6O9pYWbO3rg8lgmOYdcaGwGgzobWsrOq7WUBslhEAiBBPxOCKJBPKiiFg63fAD2KDRoM1shqpBH4MyCkGBtrV2mJwmKDRKaNqN4PWvm6nNWFaJAAyQGokh3h9CPp3DyFAAw4M+SA3Ig+ssWmx8Wx/sPTbk41kkh6IQa5iYAShLosK4qg3G1U4wHINcMo58OiHr9xJCkAunkfREIeXqtH+GAcsp0LZ5B6zrNiOfTmL00PMID56p2WbL1y4eTiIwHEIunSv6xGSzDXXCSl6BrtVO2NosIAWCQiLXkKw4ACQSaUSiCWRzefT7fDgzOlp84NbJU8Xz6LZaYdJqEUunMeD315UkLz/Ix3w+jIyNgWEYdDidcJS2Csrp/DWCAItOV1f5s5xnJJks3h/ZLDzDwwg2KdW9nCgbXL5j1y58/sEH0S1TEnuhZMVfe/EH8yIrvulNH6XeJYuJnAYjiiKe2LMHX7/7bgT9s7s1XihYli0+fByOqpEIQggi0SgGPR5kpoyolB8YJqMRnS4XNJrqRpvL5eAdGYE/EJD9cOlqb8eWDRug4vkFeQtiGAYdFgu6bbZpD9FyucPJJCZisWmBU65QQDSdRn4W+2g1z8NpsRRNpeSUiWVgX21Fa1crWK56dEipF6DpMEKhUlR5dFQ8SyZSiJ2dQCFR7auSy+Yx1D+G8dFgxX319QyLjqcbrloP92ZXlTslIQTZYApJb3R6Z1rqzLXtLTCvc0Ohrl5dLhXyyCaiEHPyRuSIRJDxJ5AajhWDpql5ArCt2wLHRZdBoaq2jU9O+DD8yh+QDIxh8g8tX6tMKgv/UBDpRHWZJEIqPjEzwbIMXN0OON02cFz19SE5qRhsiNMN0hgA6XQWoXAc+Xx1O8nkcjg1MoKhWe4TBcfB3doKu9E4rV1OxGIYnJiY1vbK7SAwMQHP8DByU/x1VIKATrcbFrNZttqpQa2GSaudNkJRLncsnUY0mZx2nyQSCQx6PIiXvIZWclfAKRQghOCmj38cn7n3XlhaWxtKR4OMuUODjBkoFAq4budOHNm/f1FuPrvNBld7e02nQEII/IEAPMPDKJQeaGq1Gl1uN0xG46zpACCVSmHI60VE5toSjmWxtrsbfb294Br0F5krCo5Dl9WKjpaWihFULJ1GIBqtafVOCEEmn0csna5Mhyg5Dm1mc+WBLAeLywx7rx1KofYwvtCigcapB8MVA6N8IovY6QlkQ7WnK5KJNAbOjCBSskpnORa9l/dg9eWra+ZJJIK0L47UaLximCZY9LBs6IRgmt0CHQDEXBbZRARSQd7Qu1SQkBqNIeN7fUTE5F6N9m1XQtCbZi8rIYh6+zF84BnkEjEQQlDIiwh4g4iHkrXLKklIZjJVzqiO9ha4V7WBF2rfJ1JGLAYbJXn0XL6AUCiGTKa2kV4slcJxrxf+0n3CMAzaLRa0Wyw1pyBFScJYOIzhYBBiyX8lFo9j0ONBMln7d+p1OnR3dkIrU1WYZRgYtVoY1K8b9SWzWYTrWNWX7dMHPZ6mlCGXGyzHQaVW4yd792LT9u11j1+wIOOFeQoydtIgY1FptMH4fT5c0ta2gCUDNGo1zGYzrC0tUKvV9ROUEEUR434/lEolWltaZHWegx4PxmSqtwGAwPN479ve1tRaj2bR8DxWOxxIZrNIy3BZLU+pKDgOFp2uajSgHiq9CgabHianESqdjFEPtmguJmZFpMfkeaokCzmkCnl0XeyGWt94O5DyIsQkC8Gog9pmargdEEKQiQZlj2oAAMmzUBbaYGjvgs7mbDydJGLf499HeNiLaCAuK4jneBZKLQ9rmwUabeN1QiSCwEAQuWwOyaS83zoSDMIXicBuNEKQMbWWKxTwy+eeQzyRQDgSkZXnmtWrp9mdN4KCZaFTq5HOZpGdZSRvJiRJwrETJ5CUaTW/HGFZFvc8+CBuufPOuscuVJBx5PlH5yXI2HzFzUsuyKC7S5YIHMfB3dHRVDpnkwGRRkYwM5lsLrfgozuZfB4TTZigMQwDk0YDlUzLeQBgFSwca+z1D5yKRIrTGKL8a2RxmNC5yiI7HavkoO91gmHkBX4Mw4BVKJsKMjiVEs7eN8lOx7AcRMIjEojLXq3G80q4Vzce0LyeJ4NkOoNcuvEAtUyLXt+UcR+vUGDM55t12q4W6XQaMJtlpytIEiJ1RktmgmVZqFQqJNPp+RVcWIIsyUWvi+DCulDQ3SUUCoVCoVAuCHQkg0KhUCiURUTuVvjZzrEUoUEGhUKhUCiLCZ0uoVAoFAqFQpEHHcmgUCgUCmUxWQTvkoWCjmQsEfL5PE6fPYtwJCJrbi2TyaB/YAAer7eil9EIDIDutja8+4or0NagME0ZjUaDYDyOaColS0GUY1l0Wa1Y394OjczdHr5AAL965hkc6++HJEMGXCko4Oprh3N9GxR1NC6mUsgVMHjIg5g/JqtOpJyIXCRT0WaQAytwyCeykArylGXFbAGRc14kRgMgMq4PkSTkYknkkzlIojx5dYYDwuEDSKU8sq5PPpOCgk3D5rKAU3Ky8uTAIDYcQS7emBJoGTEnQmA4qHletmqtyajDKncbtBp54m3JTAbdnZ1wOhyydjRwHAeX3Y5WgwFKTt71icZiOH32LPyBgLw6yeeL21eb6KhaLBasWb0aZpNJdtrFQM7zY6FYai6s8wnVyZgBQgju2L0bT+zZU5GlXUgMej263O6agjz5QgEjo6NVOhccx8HV0QG71VpTD8Ki06HLaoWgVIKgKORzemgIzx06hGhidslpnufh6uiAdZIeB8eyMOt00ApCzQdpm9mMHru96qE5EgphwO+vKaoVjcfx6okTGAsEKjqRLSYTrt6+HZ01tu6yHAvXmjZ0972ulEkIQeD8BAIDE7I7VK1Zi7b1DmiMs2/7JaKEbCCN3GThLQZQaJVg1Yqa10ehVUJo1YJRvq5uyipZKNRKMNzsdSkVJGRDqSolUVapgKGzDaqW2fUyCCHIRmNITQRBJl1/lueKebKzl5VhGXAqBdhJAYJCoYfe0AdBsNYoawH+k4fgO7ofUiFfWewWGosi5IvUDMgULAutIEAxqf0oNErobDoo1LNrV0iihPREEulSnZTlwtO5XF35ebVagMWir+TJMAxCkRiGfRPI5mZPm83n4ZmYQCAWq+SZz+cx6PEgGArNmo4B0O1yYfO6dRAmBeHxdBqRGRQ7J5NKpzHk8VQJ7DUizidKEnw+H4ZHR2V3vnqdDl2dndBptRWV0lg8jsGhoSWtt9HZ04M9Tz2Fzp6eusculE7Gq3v/ZV50Mi6++pYlp5NBg4waHHzpJXz59ttxeN8+sCy7YBFwWWW0taUF7o4OCMLrstCSJMHn92N4ZGTW4EcQBHS53TCbqjsZnUqFLpsNBrV6mg9J+bcdOnUK+44eRWaS4BXHsnA6nZU3spk6Ll6hgEWnm6ZHYdHp0NvWBq0gTMuzLJQ16PfDGwxWPUTTmQxeO30a573eaaqr5X93Op24autWtE7RE3B0WbF6cxd4lXJaWQkhEPMifKfHERoJN75YqhThmJxGONbYwatf/51EIsiFM8gGUhXVzWmwDBR6JVi+WimVFTgIVm2xo5zFHIYTOHCq6o6fSAS5SBq5yOz6FgqNCoYuJwTD68qfhBDkUykk/QFINTpKTqUAp5oSGDEAJyjA8hwAZkbfM563Qm/YAKXy9fuLEILQwCmMHHwOhfR0DQdCCKSChMBwCNGJai0UlmGgEQQICsWs3jm8QYDWpqsaFSGEIBNOIxVIzhi8lNteKptFbsp9xPMKWMwGqFT8jG0WAMYnwhj1ByFOClYLoojRUAgj4fCsowjJZBIDHg/iUzRfHFYrtvX1waDTzZgnARAtGQhOPnMtq4Dyv41GI7qm2AwQQjARDMLj9SIn02xNJQjodLlgsVimSaDXk09fLFiWhd5oxGfvvx/X33xzTTXlySxYkPH7f4Fe15xuUZl4Io2L30KDjEWlmQZDCMGTTzyBr955J0Y8ngUdkyrfvE6HA21tbYjFYhj0eOrfuCXvCr1Oh063G60mEzqtVrQaDHV9ESRJQr5QwIuvvYYjp0+jtbUV7o6OhmXE1YIAi1YLs06HXocDZp2ubp6EEOQKBfSPj2N4YgKnzp/HiXPnINXZ1sUyDCRCcNHq1XjT5s1wdbWhd2s39CZtzTwrfhmJLMZOjiE+IcMwjAEYMGjtboG1uxUkIyIznqxrxlVJrmCh0CvBqZUQWjVQ1jFWmwynLnbwhUSuKFPe4FSMYNbD4HYCDJAMBFBINejIygAKdTEw4lQKcKXpptplLUZjarUbOv1apAIBDL/yB6TDEzWzKtdJLp2H3zuBVDQNNc8XzetqmORNzlZt0UBlUaOQyiPpT0BqsE7yoohUNgvCAGazHjqtuqE2K0kEI+MTGJ8IwxeJwBMIoFDnRaR83lA4jCGvFyqlEhf39cHR2tpYnoQglEgglkxWTNbqvfxUDBNbW+Hq6EA6k8Ggx4OUzNEGhULRsJnbZCO4ZkZJ5gtOoQDLsrjlrrvwsc99DnqZne+CBRlPz1OQ8VYaZCwqc2kwuVwOe777XTx8332Iy/T8WCwYhkFPRweuffObZdk7ExTlyg8PDiKbz8tWyNvQ0YHLSm6HcvKMxOP48r/+KxJpebbkDMPgY7d+EO95z1WyzKUIIUjHMuh/+bzstRMAYLdboFbJVxLlLWro17YUAxaZNuj5eBZoQkmUFTgoNPLLynAMNE4DGFauPTiDyKkAUt5ITffVqRACiJk8IkPhitfIhYYAUCo5qPTFNRdy2myhUMCP/+dZhGtMM86YlhAY1GpY9PrKlGWjpDIZ/PbZZ5GdwyiBXE8mrUaDvvXrwdZxfJ2KJEk4eeZM0Tl6Ebjuxhvx2fvvh9Plair9QgUZh57+Z+i1cwwykmlsfetfLbkggy78bBCe5/HR227DCwMD0Or1i12chiCEoMtZlGCW82BgUPRdyBUKTT3k3VarrKCmnOeQzyc7wACKv3PHji3F88jJk2GQDM08nN4IzQQYAKA0qWQHGACKIxdNBBgAqtZPyErHK8By8jqWIgQZf2lKQEZnxjBAPpUHyMLJPzMAOL6RUZrp6eKptOwAo5yPRqUqyrrL/J3haHROAQYgX7jJoNfLDjCAkqHhIgUY33j0UTz8wx82HWBQ5gcaZMjEaDZDI9Mh8Y3GojgDzKVDWoJWBpRFYCl6WlCapmft2sUuQuOQefosQahOBoVCoVAoi8k8yIov1T2sdCSDQqFQKBTKBYGOZFAoFAqFspisYO8SGmRQKBQKhbKYUFlxCoVCoVAoFHnQIEMmZ0+eXDY6GYvFosTTc4nil+YLAGWhWaJvgpTmeOHpp+e+mHKBWMneJcsuyHjkkUfQ1dUFlUqFyy67DPv371+QfAPj4/j8rbfiHRs3IpuZXcr5QsFN8k+Qw4nz55HJ5WTdbASAmuehV8kzhCpzemQEBVGUZypGCNa4XHC0tDSV53/9115IkgRJpuaFwaYHr21O7yKZbqIdMAxywTQYRp5uBSEEYJmKpofch6eYa8J/pySMVUjnS3k2mKy0Ul7l0FX+Xw68XgCrbO7RxAml6ypT5CybzqFQkNdmAcCk16HbUV8Bc6Y8I4kECqIoy2QQAGwWS0VKf6G0REKRCDJZeaZ0QLF8rU3e03Pl4fvuw7WXXopXnn9+UfKXxQqOMpaV4udPfvIT3HTTTfinf/onXHbZZfjWt76Fn/70pzh9+jRsNlvd9M2ot6VTKXz/oYfwyNe+hnwut+BmaUqlEp0uF1pbWpBKpTDo9RbFbWSoKCoUCmxfvx6XbdwIlmVrmqcBRfOoAb8fkeR0n4l6GDUaGDUaCEolumw2dFgsAGZ/GJYVOv3RKPadPQt/NIpQONyQfDrDMFByHHZs3owta9dCZ9CgZ1MnHJ3WolpkDZMvAGBKBmSEASb6JzByZLihzlghKNC21g6T0wQpKyLjS0JM1fF/KNWXeV037JdcBE7NIxkYRSIwApDZJZfLctv5RBbBY+NI+5PgjSqYeixQavnK32vBm1TgTSoADMRMHmK2sTYsFSSIqRyISMCbVNC0G0ud/8y+JUDRU0XMixh8rh/DBz3gOA7WDgsMLfXl5at/N0EmkkbK35hYmkKjRNvOTpjWWZGZSGH0uQEkh2MVz5nZ8gCAsXAY5/1+iJKEno42rHG3g2Hri2RJooRMMgsxL2IsHMa+s2cRqiPMNVlue2RsDBzLYuOaNejt6gJQX/lTyXEwajRQchzOejz4w8GDiDdxnzaL3WqF2+WqazNACEG+UIDH60Vgorak/IWkbHD5jl278PkHH0R3SYm4URZK8fPgk9+Fbo6Kn4lkGtuu+fiSU/xcVkHGZZddhksuuQT/+I//CKAoWetyufCpT30Kd999d930chqMKIp4Ys8efP3uuxH0+xd82I1l2aJPgMMBblJQQAhBJBrFoMeDjMwRFa1ajTdt3oyLVq8GIaQq2CCEoCBJGAoE4G9iOkgrCDDrdFUumUBxRGS1wwHrFN8UUswUiUwG+8+exdCUB1EtI7jyObauW4fLLroI6kkGcgBgsOiwZms3jK0ze7UwHANOrZymginmRYydGMP4SV+xvqdUOcMysK+2orWrFSxXfe3EZB4ZXxLS1CClFFzoOuxo27EFqhbTlDxziI97kA77MRVCCKS8iPDJAOKeyLTyqG1aGLstYJUzKzEqtDyEFjVYRfXvlEQJhXR+Rr8VQgggkZn/zgCqVi3UbfppMuNEIiAgGDngxeAL5yujH2VUWgFWVws0elVDgdHksqaDKaRDqenBAgMwHAv7JR1o3dJWVZ+EECSGIhh9bhDZcLWKbMU/JJHA2bExJLPZqr8LSiXWdXWgs802TfK73C6yqSzy2cK08/aPj+OVc+eQnhIg1zMO02m12LJ+PVwOx4xtlmNZGNRqqJTVpn8FUcSRM2fw4pEjyBcKC/Kc4lgWzrY2ONvapin7lv1VRkZGMDY+vmRs1TmFAoQQ3PTxj+Mz994LS2trQ+kWKsg48N/zE2RsfxcNMpoml8tBo9HgZz/7GXbt2lX5fvfu3YhEIvjlL385LU02m0V20gMkFovB5XLVrYRCoYDrdu7Ekf37ZWv8zwd2mw2u9vaaToGEEPgDAXiGh1EoFGY9biZaTCZctW0bupzOypvVSCiEkVBI9tCtoFTCotNBqONqaNRosKatDXp10XwqJ4o4dP48To+M1MxzJkv7Xrcbb966FaY68u6t7RasubgbKm3Jhp4BOE0xuKj1FpZLZjF8ZAShwWDlO4vLDHuvHUph9g1ZhBDkI1lk/UmQkvy3YDag7U0XQ+9y1CxrPpNCfGwQ2USk0tFHzgURPRcCqWVLzzLQOQ3Qu41gOLYoka1SQGjRVAzNZkPKi8VgQnx9SkNM5yHVGelgOAZqhx4qa1H5lmEY+E+Oo3/vGWQitWXhdSYNrO4WKHmFrKF+MS8i5U8gGyvdzwxg2WiH/TIXlDU8WYhEEDrhh+/FIRQyBTAAkpkMzvp8dUcd9Bo1+no6YbeYKtcnl84jl649wlYQRRz3enFkcBB5UXzdAt3jQbLOqEOr2YxtGzfCUrJnZxgGepUKWkGoeb0y2SxePnYMr548Kfsebhae5+Fqb4d1Uoc9XnoxyMt8Ji0ULMdBpVbjJ3v3YtP27XWPX7Ag4zePzE+Q8e5P0CCjWUZHR9He3o4XX3wRO3bsqHz/13/913jmmWewb9++aWnuu+8+fOlLX5r2fb1K8Pt8uKStbX4K3iAatRpmsxnWlhao1Y03NlEUcejIEdmBBgBsWrsW61atwng0ipzM9OUpETXPy+ostIIAlmFwenRUVp6FfB5coYAupxPtDUyNlWEYBpe++2IYrHpwgryOLRGII3Q+CJPTCJWu8fUpRCJQaW0QDHqYejvB1Jmemsz4kWMInu1HfCgCMdP49WGVLNzv7IVCpQSnmW5xP2tZCUEunEYhXYCUK8haBEtAkEhmEOyfQGxExugXA7jXO6HSqGQreTMKFoxKAdPaVqgsmvoJSog5Eb976HeIhuLwRSKy8lzT4cSqNgfy2bwsn5t0Loe/+4//QDyRQFhmnm+7/HJ0t7dDp1LVnd6cjG9iAv/+5JOy8porGo0GLRYLJiYmkF6E9WpyYVkW9zz4IG658866xy5YkPHreQoy3rP0gowVrZNxzz334I477qj8uzySsRThOA7ujo6m0vFKZVNBxlgwCG3pjUkuRq1WtrETAAwHg4ilUrI3dKhVKlyyerXs/AghyGbzsgMMANCYNeDXyL9FGJaBZcMq8Fqd/LTgETktfw5bykvgjappUyN18ytdEykrv/2IWREDz/bLTgcC5LMFqBqPESootTxaL23iPuE5TGSTCMrs7AEglkjVHb2YCTXPwzc+jly+znqdGUil09DKDDAAwKCT3+bmSiqVkm0bv5gs1GJZSpFlE2S0traC4ziMj49XfT8+Pg6HY+ahaEEQIEyZr6dQKBQKZSnRzC6smc6xFFk2W1h5nse2bdvw9NNPV76TJAlPP/101fQJhUKhUCjLihW8hXXZjGQAwB133IHdu3dj+/btuPTSS/Gtb30LyWQSf/EXf7HYRaNQKBQKhTKFZRVkfPCDH0QgEMC9994Ln8+HLVu24Le//S3sdvtiF41CoVAolKaYj4GIJTqQsbyCDAD45Cc/iU9+8pOLXQwKhUKhUOaHFRxlLJs1GcsBhUKBTrcbXZ2dNTUuZiKfz+P02bMIRyKyFvAoWBab163DprVroVQ0HjMyDIMOux2tBgMEGekAgFco0Oz6bJVSCYteDyUnbxeEoFAglEggJVPaWMFxYOMFJM6HG1a6BIqLqJKjcQRP+JEOpmTlyfIc8lII2awfhMjIU5JQyMZhXtsKXi9vwTLLsQgfGUe8v46uxhQYhoOxbQ3sGy6BUlNbd2QqgkmPzX+6E84tq2TJeDMACvEcEr4YxLy8Ohk6P4Zff+9/cP61IVl1kk/ksNpqw/pu1zTBuHqoeR7xdBp5mWq/mVwOb7/8cmzfsKFKUK8eCoUC7TZbc7u3/NNF3RpB4HlcvH49tm3cCHWTdgLLhaUiEPZGYdnoZMwHje55JoTgjt278cSePRVZ2lqwDAOHw4EOp7Oy5YwQgpGxMYyOjclu1Aa9Hl1uN7Rabc08jVotDJM0NfKFAl47fRrnhmo/gNvtdmzt64O2lJZhGCQzGYQTCRRqlJVjWZi1WmhVKoBhmgo0Jpcrnk4jkkzWFA9SchzMej00/OuCSwqOg1GtrikAxjAM7K1mOO0tYMuqhAyg7jBA064Hw83+0M8EUwgeG0cu+vqef94gwNhjAa+bvfNnOAZqux4qmxavS2+z4AUrlEpzTWn1dHAC4fNnUMhkKoqPqUASscFwTb0MhmUgqHkoJm3RZVUKGNe3Qu3U19yup9Y7obOsBssqURTIYBAd7kfo/HGI+eys6RRqAXp3G1RmQ0W+Pe6P4NSTBxE6Pz5rOqAYZGp4/vX2wwDqFg00LZqaeiKBiQgOHz6LcDheEchr73Xgj/70TbB1zq7eKGYLiBz3I3ZqoviiRwgKooiTA14MjtVW8jWo1XBaLMWgunQdeY6DRhBqBg15UUQgGkUsna6cP5FO49mDB3FqcHDWdAzDoK+nB1defDHUdcS3phKMRPCHgwcxODracBqgeE+v6e7Gxt5esBwHlHY5nOzvx8n+fhQW2EZhIejs6cGep55CZ09P3WMXSidj/8+/My86GZf+n08vOZ0MGmTU4OBLL+HLt9+Ow/v2gWXZGYOF1pYWdLpcUCqnCyARQlAoFOAZHoY/EGi4nOWHaGtLC9wdHdO24RrUapi02umSvsVMkUyncej4cYxM2e5rMZmwta8PVrN5mnRxuRnE0mlEp3T8DMNUPEnK/54PCCEgAKLJ5DTtDI5lYdJqoasR0AgKBQwlH4fJtJgM6GizQqmYWdmTUbDQdhoh2LVVf88ncgidGEfKl5jueVH6t9qqhaHbDMVkNc0actuVQxglBMEGTlHd8WfjMYT7zyAbmy5mVa6T5EgMMW8UpDCp/TEAr+LBq5Wl80/PU2kQYOyzQmipFqTg1S0wtKyBgtfO0A4kEElCaOAkIp4zINLrnQyrVEDXYYfGNt2PphxsTJwbxemnXkXCX/17eIUC2pJw24zXh2OgteogmFRVf4/HU3jttXMYGZ2Ypr7LlAzj1l22Gm/adSkMLa9rRBBRQuxsEOHXxovXbVJdlu+TVCaL4/1DGAuGq8qi5nm0WyzQqlSl0Gs6qpIQ3eTRBlGSEEokEIrHp+nAlK/zeCiEva+8gpEpIw6dbW14yyWXwGI0yvJ4SabTePHIEbx29ixYhpGl9tnZ3o4t69fPGNAQQpDL53Hk1Cmc93qX7PbIRmFZFnqjEZ+9/35cf/PNDY80L1SQse+Jb89LkHHZdZ+hQcZi0kyDIYTgySeewFfvvBMjHk9l3sug16O7sxMaTWOKQul0GoMeDyIyfEHKN77T4YDT6YRBo4FFpwPHzuxVMbnMDMMgEA7j0PHjyGaz2Lx+PTpLMuL10hJCEEkmEUunoS8FNOwsncN8UPY7CCUSSGUyMGg0MGq1YNBYQKPm+WLgpdfC7bRDoxZm7Rwmw6kV0HabwKoViJ4NIjZY6mzq3REMoOswQt9hhKpV05BxWBmWVUNQ2UHyQHigH6nAOGq6eKFUJyJB3BNBYjQGJa+AoBGK3h21MiydVmXXwrDeCrXFAn3LGghqS0PtQMxlMHHuNSTGPdC2WaFrtxUDvhrpJEkCwzAYPtiPc3tfg5TOQysIUDQ4XcDxHLR2HSQFcPLkEM71DwOoLe1fDuy2vWMTtr1zM8SJNIKHxiAma4tgVTxMYnEcOzeERCqNNrMZZl3jZm4anoegUCCaTiMQi9UdtZQIAcsw6Pd68czBg+A4Dldt347OtjZZwUW+UMDBEyew79gxiJIkKwiwtbRga18fzAZDzfuk/LdYIoFDJ05grMmpmMWEUyjAsixuuesufOxzn4NeZudLg4y501SQ8fjjj6O1tRXvfve7ARSlvf/lX/4FGzZswI9//GN0dnbOe0Hng7k0mFwuhz3f/S4evu8+tJpMcNjt8lwlASQTCRw7ebKpt4KrL78cjgZNfSp5lspXHjGQM8db9ca4gAp55Xzl5nnR6i6sap/ZXKoWYkFEKlby25BZLd27NkDvNsky/AKAXCSN+GAYILWDiypIsQNPno9Ayonyrg8D2DZtQsebdwIgYJjGOvxiwFlAKnkeBJKsPCVJgud/j2LiyFBDAd9kYuk0Xh0YgEQkWWvZGIbBjk3rYDXJU7ElhCCdzmLcH66cR07acCIBUeaUaDkYKd+fcpQ9E6kU9vzmN0g1IeG9ta8Pa7u75T27CEE4FsP/vPDCslvPcN2NN+Kz998PZ5NKzwsWZPznPAUZ72s8yBBFEffddx/+7d/+DT6fD06nEx/+8IfxhS98YV6f+U0t/Pza175W8dd46aWX8Mgjj+DBBx9Ea2srbr/99nkr3FKC53l89Lbb8MLAANxuNwB5DyMGQCwebyrAYBlGdoABvF4+hqlvWz1T2tmGti8kzebpbK1tKT8bYl4s9vNyq4VloHebSnnKS5qLZ8tj9o0nYgBSkEDy8jp7lLIxruoqXdvGb3mGYSBJGYCRF7gBxeHpaH9xuk5ubUaSydLbucyEhMgOMIDi70yns021PVGSZAcYQPH6sKURSbnS4eOhUFMBBgC4Sp5Msp5dDAN/MLjsAoxvPPooHv7hD5sOMBaS8gjyXD9y+MY3voHvfe97+Md//EecPHkS3/jGN/Dggw/iH/7hH+b1tzW1hdXr9WJ1yUfiF7/4Bd73vvfhlltuwc6dO3HVVVfNZ/mWHEazGRqdDrns7AvjKBQKZSkyl1eGxXCkngs9a9cudhHkscCX9sUXX8R73/veyoxEV1cXfvzjH2P//v3zmk9TIxk6nQ7BYNEG+3e/+x3e/va3AwBUKhXS6dpWzxQKhUKhUBaXN73pTXj66adx5swZAMCRI0fw/PPP45prrpnXfJoayXj729+Om2++GRdffDHOnDmDd73rXQCA48ePo6uraz7LR6FQKBTKymYexbhisVjV17MZhd59992IxWJYt25dRarh/vvvx4c+9KG5lWMKTY1kPPLII9ixYwcCgQD+8z//Ey0tLQCAgwcP4oYbbpjXAlIoFAqFspKZzzUZLpcLRqOx8nnggQdmzPM//uM/8O///u/40Y9+hEOHDuHxxx/H3/3d3+Hxxx+f19/W1EhGLBbDd77znWkLlu677z54vd55KRiFQqFQKBR5eL3eqt0lM41iAMBnP/tZ3H333bj++usBABdddBGGhobwwAMPYPfu3fNWnqaCjO7uboyNjcFms1V9HwqF0N3dXVchk0KhUCgUSolmdrjNdA4ABoOhoS2sqVRq2kABx3HzvouoqSBjthXGiUQCqhWuez8yMIBUIrHYxaBMYfmseadQFo+57A5ZTjtLAODoK69g+86dC74Nvxma2YI60znkcO211+L++++H2+1GX18fXn31VTz00EP4yEc+MqdyTEVWkHHHHXcAKG5luvfee6vULkVRxL59+7Bly5Z5LeBSIRIM4mff/z6e/uUvm1qgQwiB2WTC8Oio7JEeiRCcPn8ea7q7ATS+x70swoWS8E4zGgByjJ3KeRZEsagQyrJNmTw1w+DYONZ1dsgWUuKUHEQigUXj14cAYCQC34Fh2Le1yxJTIoSAN6uRC6dBxMbbESFF4zVWrYCUnt3LZLY8x48chcZmA6tUNF5WSQLHaSBlAVZ4XdytkbICBLZt3Rh59mTpy8bLazUYMBIOIZ3NNZ6olMX5ER+6nXYA8u4TrVaFRDIj60FNUJS/lyvnXc5TkiSgpGHTaFklQtBhs8Go0yHaxMvOyf5+XLxhQyXfRvNst9tx/OxZ5PK1VVQXm/I2W4PBgN/+6Ec4d/gwbrr9dqxbof3SXPiHf/gH/O3f/i0+/vGPw+/3w+l04q/+6q9w7733zms+shQ/r776agDAM888gx07doCfZFrF8zy6urpw1113obe3d14LOV80o96WzWTwmx/9CL947DEU8nnZQ0kV6eJwGENeLzJNiugAgMlgwNYNG2Bvba35wC8HFolMpmhAJkmypLrzhQJCiQTSuVzFNZWv49QqlSLxUyVjJZZl0dfbi97SbqMLFWwoOBZrO13obrc3HBCVr104lsDwmB+ZbB4mrRZWg6HuA58QAlGS4C8ZYBnbjNjyni2wr7ZV/DtmTgcABFJehJgpgIgEuWgGuUi6dgdckssUswVkx5MoJBp/yJdv7WgsiWg0CaVGjfVvvwqrdl4KkKJz64zpSr8jMebD8HMvIOkbh67LCtulvVBoi/O7tczeIBGkgkFkIlHkk1mETwaQHInVU08HAHBKDiptUTJ9yOfHyQEv8oX6QTnLMDCo1VDzPDRqFdxOGww6Te37pFQn+WwBuVQOkiQhnc8jnWssuMnm8xgJhRBPp8ErFDDO4KMzPc9i4D8aCmEkFCq6Ibe0oM1kAlD7ujIMg7FAAHsPHMDYxERDZZwJrVqNzevWobO9vSJzXivPEZ8Pr548iXgy2XSeC4VKpUKX2w2T0VgROpMkCZf80R/hzz75SbSVhBQbZaEUP1/80d9Dp5mj4mcqjTf92Z0rQ1b8L/7iL/Dtb397Sf2QRpDTYCRRxLNPPokfP/IIYuFw00NZyWQSA0NDiM/jFEub1YqtfX0w6HQzSjanczmE4vFp1tS1TMfK/iHhRAKJGQIhrUoFi043rRMuP4gGh4dx5NSpaUqEeq0WW9avR4dDvuT3bBTPQbDK6cCazg7wysYG5MrXKpnOwDPqRyJZrenCMgwsej0sOt20YKw8nBmMxxFKJqe1B8caO7ZcuwUGm6H6d5YyrQQXUnU6qSAhG06hEJ/esZU9S7L+JPKRxsXfyvknEmmEI3GIU6zfda0t2Pied6D9ovWQJKnKORgAcvE4hp97EZH+81XpGJaBaX0HWi7uBqvgqgKqctpMOIJ0MAQyJRjPhtMIHhtHNjyzjg7LsRC0AhTK6k46XyjgrHcU57xjAMi0QUQGgE6lglalmtZZGnQauJ12qFX8jPdJIVdANpWDNOX6SJKEVC6HbGH6iFE5yBwLhxGa4Z4u++jMdp/4YzF4A4Fp51Yplei0WtGi11e1n/ILQyyZxB8OHMC5eVxYbzEai4aJFsu0PBkA4WgUB48fRyAUmrc8LxQKhQLujg7YrNYZnzFlh9l3vP/9uO6jH4WhFNTVY8GCjH//u/kJMj5018oIMpYrjTYYsVDAvX/5l+g/cUK2yl352Hw+j0GPB8ELdIMyDINVLhc2r1sHvuQAmysUEIrHkakzpKnkOFj0eqh5/vW33VQK0VSqthEVMG1ExB8K4dDx4wjXMX6zWizY2tcHi1G+7PNU2lot6Fvlhlbd2PqfSp0UCvCOBRCKxGser+A4WA0GGDWaStpIMomJeLymhDTDMuja1oWLrrkIgqboOCqJUjG4KNQeARNzBWSDKYjpQjFPAuSCaWSDaUBqrP2VO4pMJodQOIZcrva0Skt3JzbvugbmDmfJEC2H0Zf3Y+Lo8WlBwmRYXoGWLV0wb+ioGKZl43GkAkFINdoeIQQpXwKh4+MopIrHMSwDQcNDwStqBqDpTBYnBrwY9r/+Bq/heejV6rojWK0WIzocrVBwRVdeUZSQTWaLkvI1KIgiUrkc8qJYGYHwR6MIRKN1p0d0ggCdWl25T2LpNAbGx5GsoxSsV6vRbbNBp1KBkKIT6gtHjuDImTMXTNa73W7H1r4+aEtWEelsFodPnMCQTNv4xYBhGDjb2tDe1gauzigSUJRz5wUBf/u976Fn/fq6x9MgY+40FWQkk0l8/etfx9NPPw2/3z+t8Z8/f36WlItLow0mEgzi1pLAmFzG/X6kUimMBwILslBKwXG48rLLwCkUSMqcilEplVDxPOLptCz/BZZhEA2FEIpGMSrTmfGKbdvQ7nDInj7hFQp0Oe2wW0ywGPWy0vqDEaQzWQRCUVl1IiiV0KtUiKXTyM3wVjsbCp7DOz/zdggaAVJeXseQGIog40sgF87UDUymEonEkc0VkE7LkLxnGKzZsQ1mhxUTR49DbHCqAAB4swb2K3uRT6ZQkNH2iEQQ2D+MQiIHpUopa3RrNBDEyfNeqHm+7tTEZFiWwVp3BziGRaFO8DUVXySCYCKBYDyOgoz1VCzDIJfPI5nNIixzqoHkcpAKBRw5fRrZBVgHUX5pYVkW/R7PkvcpMRgMMOh0sNlsECZN2zcCwzD40Kc+hfc0IDq1UEHGC/82P0HGzj9fekFGU7tLbr75ZjzzzDO48cYb0dbWtixW7y4U0Vjsgo1ezERBFBGOxyuGdXLI5PN1Rz1mQiIEJ/r7m3oQxRIJtBOZtqUoPhjWdzfppJhIIRytPXoxE9l8vqkHfCEnIh3JQKlUyk7LsAyygZTsdEBx7UUzpmL+E6eQHfbKvo/ziQzSQfltnWEZqExq5JrY6a7XqGFooq1LEkEmlYXQRJ0QQjAeicjPkxCMNDnV6vX7MTo2tmA7Oggh6Pd4FiSv+YBXKuHq6Ggq7ZLsr+ZR8XOp0VSQ8eSTT+I3v/kNdu7cOd/loVAoFArlDcUKjjGakxU3m82wWCzzXRYKhUKhUCgriKaCjK985Su49957kUo1N6xLoVAoFAqlRHkoY66fJUhT0yV///d/j/7+ftjtdnR1dU2bez506NC8FI5CoVAolBXPCp4vaSrI2LVr1zwXg0KhUCgUykqjqSDji1/84nyXY0WQz+eRXARVPM/wMNQqFZxtbVDUUeacD7SCgD9+05vgD4Xw6qlTDW9/VXAcrBZLU6u7jRoN0vE0FEoFFEJtTYXJiGJRMlynUiGVzcqSf9ar1dCr1YimUrK2BwsqHvlACsmMBHWbHqyiURlvgvhwFOl4GryKB6dsfIumWBChFQQUREnWjiGWY2HoMEKtUyMXTEOSseUjEIrg8BMeuHocWH1RF9hZ1E6nkk3nMHBuBPlkDk57a+NiaoQAIoHTYpFdJ7xSCa1BAxYMcplcwzLnkiRhKBCAPxqFQaOBSsbuFAXHYbXdjmQ2i7FIRNZOEYNeD5UgYHRsDGkZv9Pe0oLVnZ0Y9fsxODzcsJq7QqFAe1sbWJbFyOjokpcPT2cyOHPuHNrsduj18ra0L0VpKCIVP3M9x1LkwvdIyxCjxYIrr7kGzz35ZEWWthaiJMHn82F4dHRR9peHwmEAgM/vh6ujA3artWF/CjnwCgXcra2wlvZgr+vqwtZ16/DMoUM4PTg4azoGQLfLhc3r10NQytNF0AoCVjscaNHrkc+JKOREsJl8RcBpNiSJIBYvymmzYKDieah4HqlsFqk6gkhqnofNaKyIlRnUaqSyWYxHozW3tHIKDq5uO5wuG6R4DulEHhl/App2I1Q2bQ3JcYKENwr/K8PIJ4o6FYVcGgqeg6ARZpX/BgBJlJBN5VDIFSAolOA5ArVSiWQuV1fbw9JhhmOtvRLMKE0C8uEMsoFUTV+VWDKF4/0e+MMRgAEGTw3j6L4zuPztW9DebZ81nVgQMfiaF/0HB4r+PQSYCMfQZrXAYbWAq/E7C3kR2WQWEAn0KlXjdcKxcNpaYGs1VxQ/eZUS2XQO+Uxt4TDPxAT2nzuHeLqoUprKZqERBJi1WihrBPOTJc4BoBVAm8WCIb8fE/HGtlIbS/eYtbUV434/vCMjKNSoT4NOh4s3bIDTZgMhBG6nE+t7enDo+HH4akiQswwDh8OBDqez8sywWa0YHRvDyNjYktXLSCaTSCaTCIZCsJjN6HS5GjbntLW3Y/sf/dEFLqFMCOZhumReSjLvNCzGZbFYcObMGbS2tsJsNtfsKEJLVIZWrrDKmaNH8cOHH8a548fBsOw0FURCCCaCQQx5vcgvochfEAR0ud0wm0zzsiecY1m0WyxwWiwzym0zDIPxYBB7DxzAyBRxrnoS6LPBKxTottngNJsBzLy3nVNyEDQ8OMXrb/yEECSTmRnltMt/J4QgmclMe+NXchxsRiP0avW0spZ/ZzSVQiAWqxJlYhgGba5WuFe1gePYmWWNBQ5alwm8WVX19/REEv5XhpH2J2f19lCqlBDUfLWMt0SQy+SQS8/e7gqiiGQ2i8KUdqtr1cG5vg0qnYCpkiVltdHsRAq5YLWvSiaXw6mBYQz5/NOUcMv/bl9lx6Vv2QyLzVh1ztGzPpx+6SyyqZnFvhQchw5HK1otxqrrI4kSMrOoc9auE8DWYka7vQUsO71OCCEgEkE2lUVhyuhNIBbDvrNn4Y9GZ1X8NajVMGq1VWqjZYlzXamzq7pPSn9PZDIY9PsRS88srz4TZTO1kdFRjI2PV3X8KkHAxjVrsNrtBkG1R1D5+vgCARw6cQLRKQFOa0sLOl0uKGcI/MtGhx6vF/5AoOGyLgblOmqz29HudM6oT8OwLDQ6HT546614y3vf2/CI70KJcT33g29Ap5mbg3kilcGVH/3ckhPjajjIePzxx3H99ddDEAQ8/vjjNY/dvXv3vBRuvmmmwRBCsH/vXuz59rcx4fNVvo/GYhgcGkJKxsNiwWAYgBDodTp0ut3Q63RNn8puMqGztRXcDA/qyZSNls55vXj24EEQAFv7+uqauU2FZRi4W1vRabU27E6pEBQQNDyyuTxCoTjy+cYUHQuiiGQmA1GS0KLXw6zVAqgt1lO+XYKJBELxOMxWI7rXtEMQlACYuhpjCh0PrdsEAoLAwVHEB8MNGYcBKI7eCAoUciKyqWzdNOWOLVcoIJnNgtcJaFvngL5VV7dOCCEghaJvSjqUQv/wGM54RkAkUjNbhmVAJII1W7qx7c19SEfTOPnCGcSDjXn3qAQerjYrDFoNcpl8zdGGqrICCJXqxGjQwtVmK07DTPHomYlCvng9Y/EkDpw/j/Pj4w3ZCTAMA5NWC4NaDa0gwKBW13U7rhgmJhIY9PtlTW0RQpAvFDDk8SAcDmPdqlXY0NsLto7bsUQIGAD9Xi+Onj5dNLPs7IR2kot2LdKZDAaHhhCpYx2wFOBYFh3t7XDY7cXrwnFgWRbv+dCH8Cc33giNzGfhQgUZzz46P0HGm29exkHGSmAuDaaQz+N3P/sZfvr97+PE8ePw+ae/zS01GIaB2WTCmtWrZY9osAyDTZ2dUPO8rLSSJCGZzSKWTk97s6oHr1Dg0tWroSx5TMghkcnMaGhVD45li50D5CkBEkJgcJsg6ATZxm/ZeBbxkdIDewGaDwGga9PD2FPUtmm4rARIpTL4zX88i0xGnu06wzAwaNTQ8oLs+0QomYXJlZ4nhEBtUEHJK6eN0NRMB+D8yBj++6UDpVHrxsva7H1CCMFYOIzBJkYJOJaFw2SqeLE0ikQIgrEYktmsrDZLUJyeOHbixJJ+3k1G4Hls2rgRV197LT74sY+h1T77NF4tFizI+P7X5yfI+Mu7l1yQ0fSaDFEU8Ytf/AInT54EAPT19eFP/uRPGjKpWY4olEq864Yb8OZ3vxs7SnbBS/2GI4TA2KQhmaBUQiMIstOxLItsoVB8o5OZ1qBW17WUn42cDE+JySg5TnaAgdLxgq627fls5BONLzycDxgAqlaN/KkzBggGorIDDKDY9lQKZeX/5aARBNltByjWg5JXlv5fRjoAQ+MB2QEG0Px9wjCMbD+TMrxCUXNNyGywDFMZOZHTFhgAsXh8yT/vJpPN5XDjHXfgvQ34k1AuLE090c+dO4d3vetdGBkZwdq1awEADzzwAFwuF37zm9+gp6dnXgu5lNAZDBDUamAZDB1SKJTGKc0yUlYIzs7OxS5C46xgnYymtiB8+tOfRk9PD7xeLw4dOoRDhw7B4/Ggu7sbn/70p+e7jBQKhUKhrFgIeX0ba9OfpRljNDeS8cwzz+Dll1+u8i9paWnB17/+dWqaRqFQKBSKHOhIRjWCICA+w37vRCIBvrQ3nEKhUCgUyhubpoKM97znPbjllluwb9++iu7Ayy+/jFtvvRV/8id/Mt9lpFAoFAplxbKC/dGaCzK+853voKenBzt27IBKpYJKpcKb3vQmrF69Gt/+9rfnu4wUCoVCoaxcVnCU0dSaDJPJhF/+8pc4d+4cTpw4AQDYsGEDVq9ePa+FW4qcPXkScbqzhLLcWJrPnyUFkehFWkm88PTT2L5z57yoHlOap2mDix/84AfYtWsXPvCBD+ADH/gAdu3ahUcffXQ+y7akCIyP4/O33op3bNyIrAzDosUmGAzK3t9OAKRzOYyXPFHkmIpJhIBnWYiiKCsdAISTScRSqUoZGoUQAl6hqEzdySFXKMjuf8vHxwMJ2XlKEoFSr4QoSQumO0AIQXw0BrEgyu5I7W0WtNhNxX/IfFZnCs1J7SfSadltp3x0Oplpqk7WuJxN+f2kczkES+vT5Namw2SSLTgGAJl8XpZSaBlCir42zdwnFpMJqib0QBaTh++7D9deeileef75xS5KXcp1MtfPUqSpkYx7770XDz30ED71qU9hx44dAICXXnoJt99+OzweD7785S/PayEXk3Qqhe8/9BAe+drXkM/llqxh0GTKCos2qxWu9nbZD89MSUb4pf374XI4cPX27bCazTVVAqVSp3ngxAnsP34cDMOgr7cXvV1dABpT/hQlCQfOn4fVYEBvWxsERW1ZaEIIJEIwEY8jkkiAYRho1WqolMqGfFKUHAetIMh60BNCIEoS/NEoYiMj0OrU6F7TDpNFX+f6EDAMMDg4hmPHzyOXzcuWT5dL+aETSiQQHBsDd3oQ3Rtd6FjdBgCzGraVYTgWmlYd3vuRt2Hw1DD2Pf0akrFU3XwVHIu1nR3obnegUBAxPBZAKNqYMZhOpYLVYKjyBKlHVZ2k01CrBLidNhh0mrptlmEYnBj04OXjjbsJT+X06CgMajW67XZoBaFhj54WvR4GtRrDwSDGIpFG1eVBCIEvHIZGEGDR6RqS/BdFEcfOnMGZwUEoFQq4XS60trQ0rPypUqmwZdMmjAcC8Hq9VT4xS5kTr76K9195Jd6xaxc+/+CD6O7tXewizYxU+sz1HEuQpmTFrVYrvvOd7+CGG26o+v7HP/4xPvWpT2GihuvfYiJHIlYURTyxZw++fvfdCPr9SzZKnEw5uDAZjeh0uaBp0JsAKBkiFQrwDA/PaIi0vrsbf7RtGzSqaoOvsmfJifPn8fyrryKequ6E9Fottqxfjw6HQ5aUMcMw6LBY0G2zTXuIlusinExiIhab9tar4DjoVKpZVRE5loVWEKCUoU5bflMIxuMIJZPT2oOpRY9Vazqg0aqqJK0rJlW+EI4cOYtorFrlsREjOLnUMg4DALVehdWbu2DrmKWTYRko1EowyurrLhZEnDzUj0PPHkchL1Zdg+JxBN1OB9Z2toOfYlKVSKXhHfUjkZp5FFBQKmE3GmWpZ9arE4NOA7fTDrWKr+r4y212yOfHc0eOIxhrLABqhFaDAV1Wq2xp/HQuh6FAAKFEouFgo4xBrYZJq53mmyKV5unPDA7i+Nmz0+zbtVotut1u2VbpBVHE6NgYRsfGACx95WMA4EojnTd9/OP4zL33wtLa2lC6hZIV3/sPX4VOPUdZ8XQGV3/qC0tOVrypIMNkMuGVV15B75So8MyZM7j00ksRiUTmq3wV7r//fvzmN7/B4cOHwfN8U3k02mAKhQKu27kTR/bvX/L+JJNRq9XocrthkiElXn5Qj5QeGrVGahQch63r1+Pyiy6q+CYMj49j74ED8Ndx3rVaLNja1weLTJlzBcehy2pFR0tLRf47lk4jEI0iX+dtilcooFOrKyMFLMNAw/PgFYrGfRtKdR9JJjERj9d+22UAe1sLulY7oVAWr080msThI2cxPl77+ky2tG/0TXimsjIM05AFOgCYrAb0XtwNg+V10yhOrQQr1O4gs+kcDr9wEsdfOVu5Pm2tFvStckNb40FJCEEkloBnLIBcrlg2BcfBZjBAXzIXa+Q3lmmoTgC0WozocLRW2mwwFsezh4/BM35h3EVZhkGb2YyOlhbZo1SxVAoDgQCSMqdkWYaBsWTWBhTvE+/YGA6fPIlEqvbok9lkQldnJwSZ/ivZbBae4WFMBIOyyrqYsBwHlVqNn+zdi03bt9c9fsGCjO98ZX6CjE//7coIMj71qU9BqVTioYceqvr+rrvuQjqdxiOPPDJvBSzzxS9+ESaTCcPDw/jBD35wQYMMv8+HS9ra5lDahaXN4YBWo0FrS4ush0Q4EkEimYTf75/2llMLtUqFTb29CIRCOD8yIqusV2zbhnaHQ/ZctIbnsdrhQDKbRTonz0vDYTJBUCqhmsHSuhbpXA7JTAaxdBo5GeZrLMdC16JDOpOFZ8gn6620x25Hp9UqI8XrBGIxZPN5JGR2UJuv7oPN3QpOpag7hTKZqD+G1353DHaLCRZj42/DEiEYG52AWBBh1GpltYWm64RlkIeEaCqF00PDC7IOVslx2LZqlezpSkIITo+OIpRozLm2Kq0kIRmLYSwQwERpTVUjMAyDvvXrm3Js9gcC6B8YkJ1usWBZFvc8+CBuufPOuscuVJDx+2/PT5Dxls8svSCjaYO0H/zgB/jd736Hyy+/HACwb98+eDwe3HTTTbjjjjsqx00NRJrlS1/6EgDgsccem5fzrSTsVivUpTcYOeTzeQzLDBKAovXzvqNHZacDgFgigfbJ8wkNksnnMTGDAFwjsAwDFc/LHh0gpfUecpFECefODTc1b53MZmWnKRNKJJoadUslM8XRCxkBBgDoTVqs73bJzo9lGFgMehRy8l1zm64TieDo4BBSc7i+csmLYlPBDMMw0AgCwjNMAdWjIIo4euaM7DwJIchms00FGWrV3DrHhYbuNllYmgoyjh07hq1btwIA+vv7AQCtra1obW3FsWPHKsctdmVms1lkJz1UYrHYIpaGQqFQKJQZkEjxM9dzLEGaCjL27t073+W4IDzwwAOVERAKhUKhUJYi87EFdamuHWxaJ2M+uPvuuysromf7nDp1qunz33PPPYhGo5WP1+udx9JTKBQKhTIPkHn6LEGaXpMxH9x555348Ic/XPOYVatWNX1+QRAgLDMBGQqFQqFQVgqLGmRYrVZYm1xJT6FQKBTKimA+vEfodMnc8Hg8OHz4MDweD0RRxOHDh3H48GEkmtjmtdLwDA/D4/WiIGNLH1BcFd7b0wOdVisrnUajwepVq9DmcMha3MuyLJSCgGA8Lmv7IQD4AgH86plncKy/X7bqajSVwngkUldXYyocy8JpsUArc/V8WSehGdloNc8jnk7LLmtBFKFTqaDmeVnpOAUHc5tJ9s4SABgd8uOV42cw5JMnVieKEuKpNBKZjKy6rAhvJRLI5HKy8szkcnV1Q+abZDKJ377wAl45flzWTiNRkhBLpZqaY481uQMLAAITEzg/OIisjC3ihBBEl9mC+iWp2iwRkDl+lurCz6Z0MhaDD3/4w3j88cenfb93715cddVVDZ2j0T3PhBDcsXs3ntizBxzHQVwmErocx8HV0QG71drQ3vxy1TMMg2AohCGvt2o3zlR4noerowPWlpbKd7l8HkMeD4J1xLhsVivcHR1QTBLC0peUCmtJSEfjcbx64gTGAoGKEmKLyYSrt29Hp0wtEwaARa9Hi07XsHaBHIErBoBmSkcvlSSg6227NKjVcFosVUJhPMdBIwg1r48oSUjlcpWgrSy1nsxkaneqDNCxzom1l62GUqUEwDS8qzgciGLf00cwcn688p1eo8bG1V2wmWcXW5Mkglg8iWi0emumWqmEuo4QVCSZxFmfD/F0uvIdr1DAoFaDn0XZFSgGX8PBIMbC4QWbss7mcvB4vZgIBitifjqNBm/euhXrurpm/Z2EEPijUQxNTMje/pxKpzHk8SAyD+aNDMPA2daG9rY2cDVUcWPxOIY8HiSSyVmPWYp09vRgz1NPobOnp+6xC6WT8fSDX6wpZNcIyXQGb/3rLy05nYxlE2TMB3IbzMGXXsKXb78dh/ftA8uySzMCngFBENDldsNsMslWthzz+TAyOlr1kONYFk6nE87SyMVM50wmkxgYGkJ8ysiSyWhEl9s9q44HAxSVCjWaqrf+dCaD106fxnmvd5rqavnfnU4nrtq6Fa0lSe5G4VgWVoMBRo1G1vWpKdXN80XJdUzfuk0IQU4UMRoKVQzgJqdrL42WzKb0qSp1wpOvj0QIMrkc0jUCiYIoIjHDqEirqwXrd66BzqyVJfWeSmRw6NljOH14AAzLVJmtMUxxtNZqNmJjTycM2tcl7QkhSCYzCEfiEMWZ7yGmpMYqTFFjTWWzOOfz1QzS1Eol9BoNFJOCsXJw5w0Gm/YkkUstue1ygGyzWPD/27v3+Kbq+3/gr5OkSZpL07RNek3SC4ogclG8ALKB+lDmd2zoYPs6huiXqTicQx0T3VS2r4o6J/62h6CTDSfK1zlF+c7N25cJm6KA3EuhtNg26SVNem/T5no+vz+aZL0nJ821fT8fjzw2S07O++STk/PO55zzfi+eOxdFubmDlm13OFBrswkuNOd2u2FpaIDNbo96dWKJRAJjURH0Ot2gMelzOlFnsaC9vT1lKiKLRCKoNRpseOIJ/OcPf4i0IWXvRxO3JOPpKCUZD1KSkVCRfGAYY3h/9248/sADaDCbk/a81yD+b3y1SgWT0SiowE6g2VR9fT2sNltwBkIcohdD4GDV1t6OOosFIo5DsckETUZGWGWyxSIRtEolZBIJKmtqUFFdDT7EbV0ijgPPGC6ZMgXzZ82CSkCvFqD/l7Beo4FSJhOcjLX29KCtu7u/T8qA0uWjLof+98DhcqGhtRVenkd+Zia0KlXYB/rAQdjt86HX5Qr5yzywTpfHA4fTCYVWgYvmX4icoixByYXH7UX5oXM4ceAMeN/YYxJMAPN0uKjYAMYY2tq64fGEd3pMLBJBIZWCMYa6lhbUt7aG3ctDJZdD6S9iVWe3x+30CGOsv3FYfX3IU5aB96e0qAhfv+wyyKRS1Nrt6AxR+nson8/X/4MgRCuAaJDL5Sg2GqFUKtHQ2Ahrc3PKJBdiiQQikQh3/vSnuPvBB6EWePCNV5Lxf08/Kvi07FAOpxPXPfgrSjISaTwfGLfbjZ1bt2LLpk3ojsKUZDxwHAdtZiYunDJFcGG0wH3bo81cjLXc0BjC5XK7cer0aXgEHhw4jsM1l1+O2VOnCloO6J8lMPo7oQrB8zy6nU54BX7BB97TgaeqYo0ByL1QD8NlRjDWX2I7XI7uPuz548fo63UJukWOA1CQlYWcCL7sel0unLdahbd7959uEDobMB4+nsep8nL0RdBrJFevR7HJJLghmtvtxsnycngEXtcUqVRJKEZy86pV2PDEEygwCK9MC1CSEQ0pc+FnokmlUqxZvx6f1dRAKbBrYaIwxqAR2JAsgOM4iEK0kB5tuYEPIRwOh+AEA+jfzikRfokoZLKImpFxHCc4wQgsF/jfeFXE5QBkFmn9Yypsna3WdvQ5hCUYQP/TNQJnlgIcTqfgBCMgngkGALhdLsEJBtB/OkebmQlAeHkDh8MRtwQDSN4iT6E8vX07trz6asQJRlzxUXokIUoyBNJotVAIvBuDxAH1I0g+NCYkgcoimNlMlMDM8XgfQjU0NOAHP/gBsrOzkZ6ejksuuQRffvllVLctoXUyCCGEEBJ/7e3tWLBgARYvXoz3338fOp0OVVVV0Aq8kD4USjIIIYSQREpAg7Snn34aBoMBO3bsCP6tpKRkfDGMgE6XEEIIIYkUxd4lXV1dgx6j1T763//9X8ydOxcrVqyAXq/HnDlz8PLLL0d90yjJIIQQQhIomtdkGAwGaDSa4GPz5s0jrvOrr77Ctm3bcMEFF+DDDz/E3XffjXvvvXfEopfjQadLCCGEkAnCYrEMuoV1tCahPM9j7ty5ePLJJwEAc+bMQXl5OV588UWsXr06avHQTIZAVWfOpEydjEklRW+zm8hS9dbHeKF3J7ZOHT6cOp/BwDUZ430AyMjIGPQYLcnIz8/H9OnTB/1t2rRpMJvNUd00SjLCZG9uxsNr1+L6GTPgiuC++ERpbW0VvKMFnh2oWRGvHTVDrYYywtuDj549G7JC6FAMQFdvL1xeb/90Y7jL+Qtqef3LCW3yFegvEs8vQFuVDT6Pb1Ap8FAYz5Bn0CFDG37F2IHaI2heyBiDOj19zH4to+E4Dlr/5yeSGiSRrFMulwfrXQhdZ7PNBp/PJ+wzyxjUYxw4Qgn0IolXjZZ4C2xXRkYGPti1Cz+/7TacPX48sUGFIdCEdbwPIRYsWIDKyspBfzt37hxMJlMUt4xOl4TU19uLl597Di88+SQ8bndK9C8JVOjT63QwFBaG3QwswOl0orauDh2dnchQq1FiMkERYWElISQSCS6ZPh1t7e2oNZvhDqOwklgkQlFhIUTp6ThWUwNTTg5yMjLCKpvtdLth6+uDpbUVBVlZKM3NhSREATKeMXQ7HHh73z58UV6OvOxsfHPhQpQVFYFnbNTKoQwAGIPT40Gvv9iUQiaDwn+wCBVroNx2mlgMr88Hh9stqCdHh6Udp2zdyJ9RAP0F+v51jlKYK/Deddi7cPazSiiZBGKlEl19fWGtUywSoUSvR1FWFhj6K3i6QzT8CpRA7+rrQ1Nbm+B+IxKxGPlaLWaaTOjq60N5XR1aurvHrKYZ3E8yMmDU6SAWidDY1oaGtrawi4FxHIeLLrwQnV1dqDWb0SugPHhbezuOnjiBooIC5Pl7mYT6HPQ4HKitqxuzkeFIAvtJXm4u3B4PzPX1aB3QwG2iCPRtytRowHEcas+dw6a77sLlX/86vn/PPcg3GhMdYtK47777MH/+fDz55JP47ne/i0OHDuH3v/89fv/730d1PVRWfBQ+nw+7d+7EUxs3otUmrJV1ogS+MDI1GpgMBkGJAWMMXq8X5vp62Oz2Yf+ek50Nk9GItCENrGKF53lYbTbUNzQM64Ib2M783FwUFhYibUgXTpVcjhK9Hur09BH7pri9XnT19Q1rNy8WiWDKyYExJ2dYRU6e5+H1+fC3Awfwf4cPD1v2QqMRSxcuhE6rHTHBcXu96BnhIM1xHJQyGeRSKcBxw2IdrXEYYwxurxcOgS3PAUCmlqFotgFaw+BYA6/T1+3E2QPn0Fwz+HPAGIPD5UK30zm8fLz/f4uys1Gs0w0bE4+/38rQKqmB8elzu9HQ2gqHwIMnx3HI1Wigy8gYlEwHSoyXm83oGWXmUaNQoFivh3LIrIDb64W5pQW2zk5BJb8ZY2hpbUWdxSK4cq1cJoPJaETWCJ8fxhjcbjdqzWa0tbeH/ZqD9pOCgmFNwXp6elBrNqO7pyflk43RmrkFiMRigDFcv3w5bl6zBhn+2adQ4lVW/MNHHopKWfEb/nuzoFjfe+89PPTQQ6iqqkJJSQnuv/9+3HHHHeOKYyhKMkbg9Xpx84IFOHHoUErtfOnp6cEsPlyB6fsGf/fIsWZqRByHvLw8FBUURFRyPBIerxcNjY1oslqDf8vOyoKxqAjyEDtllkqFYr0eMv8Bj2cMXb29Y3YuBQBZWhpK9Xrk+7/wGWPYf/w4/vrpp+ge45eqiONw2bRpWDJvXn9HVo7r74TqdIYsAy0WiaCUyyEbcCAIpwU6C8yORFBOW6VTwXCZEcqs/m6sXrcPVYfPw3y6fszTKoG+LQMTAl1GBspyc4MzM6PF6vH54HC5gsmW1+dDY3s7OiJoF56tUiFXq0XaGO3IecZgsdtRUV8fTAzTpVKU6PXIDHFqrtflQq3dLjg2H8/DarWivrFR8MynWqVCickEpbJ/THw+HywNDWiO4IdOllYLo8GA9DH2E8YY2js6UGs2C54dSQbhtqUPEIlEkMpkeGTbNpRNmxby+fFKMj74xcaoJBlLHn8q6XqXUJIxApvVisvz8+MY2fjk5+VBqVAgJztb0IG/vaMDPQ4HbDYb3AJ+eUkkElw2e7bg0zDj4XQ6YWtpgVajgVpA7xgOQGluLmRSKXoFfol63W54+vrwRUUFrK2tYS8nTUvDuhUrkC6XC+4EmqlUIiM9HbK0NEHXCPA8j3aBnTwDFPkqiNMlMJ9ugNcdfk8MxhhkaWnIVqsF9SlhjOErmw09TifaenoEHTzlaWnIUCigVSr7Z3/C5PX5UGGxQCwSQZeRIWg/qbXZ0ChgBiHA4/HgyPHjEf1Iyc7KgkwmC163ES6xWIy83FzB+wnP8yivqIAjws9QvGVkZCBDpYJer4dMwOcA6E9MVv74x/jmypUhn0tJxvjRNRkTQK5Oh/T0dMHLeTwe1Dc0CF7O6/XG/cp4uVwOY1GR4OUY+s/zKyP4om/v6cH/HTggeDm3x4O27m7khPHLaijmv1ZDqPEkfPaaFsEJGNB/HUSp/1oCITiOQ5/LhdbubsHLikQi5EdQ9lgiFqMoO1vwtR4AIhoPAEhLS4t4JrS1rS2idXIcF9F+IhKJIJfL4ejrS4k7taRpaTBEsJ1Akl70Go0GZ0l6uSAlGYQQQkgC9d8dMr7kLllzQ7qFlRBCCCExQTMZhBBCSCKxKDRIS9KpDEoyCCGEkEQa0OBsXK+RhCjJIIQQQhJoYIOz8bxGMqJrMiYAc309zBYLvCFqMQyVLpfjgrIyqCIo5V19/nzIuhpDBe75r/7qK/T19QleZyREHAepRHguzRiDl+dx4ZQpyAyzcE9AhkoFVQR3+/h4HgfLy/H7PXtwXuBdP63d3fiyuhrVTU2C7qDw+nz4qrkZVU1Ngu8wYYyhobUVHQ6HoC843l86vDArCxIBd+AwxtDZ24tDVVWwtrcLWqfD5UJVUxPq7HZ4BdwSyvvXGQmHwxH3CsE8z6Oyqgo2u13Q++PxePpvX03SA9VQfU4nzlVXozuCO5SS9WA8UdFMxgh0ubm4edUq7N65E2KxWNB96okQqAJotdlgKCpCrk4X1i2NKpUKKvRX82xta0OdxRJ2QZ629na0tbejqbkZJoMB2VlZo94axhiDzW6Hub4+mAjZW1qQq9fDUFg4rBJhNHAAMhQKaJTKYVU0Q3G63Wjr6YGb55Gl1SI7Kwtd3d2orasbs46ATCrFVTNmYM60aaOWFx8JYwzn6+ux78sv0emvvnj4zBlcOnUqvrNoEfRj3LLpcDrx5Vdf4bzVCg5AQ1sbzlutuNhoRGGIMTEPKVJl7+pCrkYDQ05OWIkZzxi6nU50++td5Go0Y97rP7BwmCo9HUq5HFlqNWydnbB3do5Zyjs4Jv5Ym9rbka1WY4bROGZRLbfXi3ONjfiquRnw96exdnTAmJOD3MzM0cvAM4b2nh7U2O2Ca5243G6YLRa0CKitEi08zwf3zUarNWRxvvEUDkskh8MBh8OB1rY2ZGm1MBkMIYvzBegLCzH361+PcYTCTOSZDCrGNYYjn3+OX913H44fPAiRSJQyO2Ggfr82MzPse8IDH4MmqxUNjY2Cfu0BgFKpRLHRiIwBBYAYY+jo7ESd2Yy+UUo7i0Si/t4NeXkRNagaMRa5HFqVCuIhpcFD8Xi9aHc4RvxFHyj1bG9pgbm+flBfFbFIhFlTp2L+zJlIk0gE1aywtrTgky+/RKPdPqymgkgkAhjDNXPn4pvz50M5YHbE7fXiVF0dTpnN/adzR9iNNQoFZhiNyBnwWQ+n3LaI41CUnY18rVbwmChkMuRqNIMql4Yqgc4Yg4/n0dTejrYhTdXGGpPA+1WUnY1pRUWD6lnwPI8amw1nGxpG/SzL0tJQrNMhS6Ua9Dnp7utDrd2OboGzbV6fD43+yrmB7UqkwPuj0WhQPKTNQKAEutliEVSILxmFKp8OAJxIBIVKhe+tXYtrvv1tSMKc3YxXMa6/btgwrLy9UA6XC0t//eukK8ZFSUYIjDG8v3s3Hn/gATSYzakxnchxAGNQq1QwGY1Qq8Lvohn4wq+vr0dTc7OAVfbv6NrMTJgMBvCModZsRldXVzCesaSlpcFkMAiuWjqQPC0NWWq14NMjPp5Hh8MR1kEl8Iuj0WpFY2MjSouKsGjuXKgVihF7j4yms6cH/zp6FJV1dSELNnEcB1laGpZefTW+PmcOamw2HDl/Hq4Qp8cCr5uXmYmLDQb4GEO52YyWrq6wenKkicUw6XSCK2QC/QmOzt+oTkgzN6fHg8a2NnQ4HGGPCQcAHIcpeXmYkp+Plq4ulJvN6Auz1Lo6PT3Yb8Vst4dsrDYUYwzNdjssA2bqkkmwEVxODgxFRehzOgU3c0sVAxvBiUQiiMRiiEQifHPlSnxr1SooBHwXApRkRAMlGWFyu93YuXUrtmzahO7OzhhFGF0cx0GbmYkLp0wRfJDwer04dfo0nBE0rAp8pIRWO5SmpWHmJZcMa64VjiyVChkRdIp1eTywdnQI/tXJGMO0oiJkqVRhdXwdqMpsxnv/+pfgKVIRx2H2zJmC23yPZ0zSxGLMLikZsz/IaFRyOdIFxsoAdDoc+NeZMxHNHApJDsazTICP53GqvHzUmbpklUo9mSIhk0oxc8YMLF66FN+7+27kRFCZFohfkvG/P/1pVJKMbz37bNIlGXThZ5ikUinWrF+Pz2pqoBTQEyCRAlOlkXB7PIITjMA6R/r/4VAqlRElGEDkpZ+dHk9EX7YijkOW/1eR0ASurqkponOwMplMcIIBjG9MVHJ5RAkG0J80CsUBaOnqivjUZCSHzfEcat0uV8olGEDiT+XEmsvtxqr778e6TZsiTjDiKfB9MN5HMqIkQyCNVgtFBHdjkNhKyn4EY0i1eOON3h0yXgUmU6JDIKC7SwghhJCEmsC1uCjJIIQQQhJpIt/CSqdLCCGEEBITNJNBCCGEJNBEnsmgJIMQQghJoImcZNDpEoGqzpxJmToZk0my7mCjSbV4443eHTJen+3dmzL7GYvSIxlRkhEme3MzHl67FtfPmAFXAu6LF/trFQi99dHe0gKv1ytoZ2Pob56mElgdb7y6urvRM6SsdDgYY2jt7gbP82P2vxhpuXSpVFCfkeCyABrb2gT/AmGM4aLiYsH1QDiOQ5/Tia4IGkKNR1dfX7DqZtgVMOHv/dHdDR/PC2rYxvsrlEZam2M8twYLXZYBkI9jPxGJRBF99kh4tmzahKVXXIHDn36a6FAmNTpdEkJfby9efu45vPDkk/C43XHvXzKw3HZvby9qLZawS3UDQE9PD46eOIGCvDwUFhSAC6Ofh9PpRG1dXUQH/PHw+Xw4VVGBLK0WxSYTpGlpY8bKGAPP87A0NMDa3AyFXI5Z06bBVFAQVhXOPn/TLSGJyUC1djtsXV0o0euhUSjAMHp9h0AiYuvsRFN3N2bPnBnsExPO+gP9aISUiI8GH8/jlNmMbJUKxXo9pBLJmO8rz/Pw+nw4cOIEjldWIkOpxJJ58zDrwgvB8/yofV0C49Xc0YEKiwUegb1zxCIRtEollHI5PF4v2np64AyzJ4dKLkemUgmRSISu3l50OhxhJVSR7CeB9y4/Lw+F+flgjKG+sRHW5uYJX4UzESqOHcPyhQtx/bJlePiZZ1BywQWJDmlk0SimlaSfHSorPgqfz4fdO3fiqY0b0WqzxX3nH61xWKDpWK3ZDKfAGZW0tDQYCguh1+kADP7lxhiD1+uFub4eNrs9OhsxDhzHIU+vR1FREcQi0bBYAaCpuRkNIzTAysrMxGUXX4wcrXbEZMPl9aKtu1twd82xZCoUKMnNRbpUOujvgcSjw+FArc2G3iH9NNxuNywNDbCN0CANACQSCYxFRdDrdAkv4MVxHPIyM2HIzh42JoHk+1hlJb44eRLOIdtZpNdj6cKFMPkPrIFlA+9Pp8OBU2YzWgXO1HAANEolMhSKQbMCjDH0ud1o7+kZNWGRS6XIUqmG9brx+nzocDhGbCDHGIPX54PZYhG0nwTGNic7G8aiomGVW/ucTtRZLGhvb6dkIwbEEgkYY7j1Rz/CTx59FFk5OWEtF6+y4n+5996IqxYH9LpcWPHb3yZdWXFKMkbg9Xpx84IFOHHoUEJ2+HBaoI/UPj1c6enpwRbQgen+Bn/3yGTrNCsRi1FYUID8vDwA/V/W4balL8zNxaUXXxzsXurjebT39MARQbn0cOk1GphyciARi8FxHHpdLtTYbOgM0Yyqt7cXdRYLOvzX+3Ach4L8fBTm5wdPlSULiUgU7NIK9Md6rq4O/zx6FJ0hftVPLynBNxcuhNZfmt/p8eC02YyGtjbBcagC3XbH6BTLGEOP04n2ATNWaRIJspTKkH1V3F4v2nt60OfvHssYQ2NTExoi2E/UajWKDYaQp1a6urtRazbD4XAIen0SHpFYDHl6Ov78ySeYOXduyOdTkjF+dLpkBG0tLThx6BCA+F2gp0hPh1arhS47G+kDWnqPhuM45Or1yMnOxtETJwQlGn19fThTWQlNRgbUajVsNlvStnv2+nyos1hgtdmgz8lBe2dn2NPTDc3NaLTZcNWll0KtUqGnry/mF0fZOjvR0tWFvMxMeHw+2Lu6wlpOoVBg2tSp6OjsRHd3N/R6PWRDZkWShZfnUWu3w2K3g3e5UNvYiMYwf9VX1NTgbF0dbvza15ChUqHObhd0uipNIoFCKoVSLg+r2y7HcVCnp0Mpk6Hb6YSY46CUy8OaFZJKJMjNzMRX9fVosNsj2k8KCwqgUiqhzcwMa50ZajUumT4dldXVaG9vF7QuEhrv88HZ24sv9u8PK8mIF6r4SWJOLBbDWFQU0XLStLSIWkx3dnWhM8yDYKK5XC5YGhoEL8cYQ0tHBxDH2QCeMTRGeIDI1GiQGWFTu3hzejz48sQJwcvxPI9KiwU52dmClxVxHLQRXJciEomgiaBLLwCAMdRH8NkDENFMFMdxUKSnoyOC7sAktESfdhwJ3cKaYLW1tVizZg1KSkqQnp6OsrIyPPbYY3APOe9LCCGEkOSREjMZZ8+eBc/zeOmllzBlyhSUl5fjjjvugMPhwLPPPpvo8AghhJCITeSZjJRIMpYsWYIlS5YE/7u0tBSVlZXYtm0bJRmEEEJSGiUZSaizsxNZWVljPsflcg26A6ErRa4/IIQQQiaClLgmY6jq6mr87ne/w1133TXm8zZv3gyNRhN8GAyGOEVICCGEhIeP0iMZJTTJ2LhxY7AC5WiPs2fPDlqmoaEBS5YswYoVK3DHHXeM+foPPfQQOjs7gw+LxRLLzRkXTYT3NTudTrjifAGsQqHAlNJS5OflCbpSWyIW4+ILLsCVs2ZBrVTGMMLB7C0t+Kq2VvCFwgqZDLqMjGEFtkJxulw4X1MDs8Ui6K4fnudhbW7GuepqdAssSqWUyXBBfj4KtNq4XT0/nhLnkY6JfIzaMWPp6e3FoZMnceLsWUG3ofI8j+aWlojWqVAoIh6LDLUapcXFSJfLI1qejC7ZagEB/z5dMt5HMkpoMS673Y7W1tYxn1NaWgqp/0u+sbERixYtwlVXXYVXXnll1BLFowm3sApjDPevXo3dO3dCLBbDJ7DEsRBqlQolJhOUAg+6Hq8XDY2NaLJaYxTZcFKpFIaiIugG3Hro9nhQZzajdYxiShyAEoMBs6ZNgywtLVjxsaquDuXnzsUtSeI4DoX5+SgIcVuhLC0NWSrVoFid/hLk7jGSBq/XGywRHditxGIxDIWFyNXrxyyp3d7RgVqzedDpvSytFiaDAfIxDjRSiQTGnBzoBnye3T4f6mw2tMSoz8nQwmHjEcmYCOF2u3G6uhqVNTX9f2AMEokEM6dORZnJNGohL8YYGpqbcayiAj0hCqkNJU1L699P/FUlI0k0Bn4tN9tssDQ0RHSbOhnOVFaGnR9+CFNZWcjnxqsY1867745KMa5V27YlXTGulKn42dDQgMWLF+Oyyy7Da6+9FlEVRKEfmCOff45f3Xcfjh88CJFIFNUMWC6Xw2QwIGuU0tej4XkeVpsN9Q0NMU1+BhKLRCgoKECBf+ZipFgdDgdq6urQPaRQVr5Oh0svvhgZKtWw3h48Y+B9PpyuqkJlTY2gRlrjMVqpbolYDK1KBaVMNizWwH8HqkcOjDWcMZHJZMHxHrjOnp4e1Fos/TMXQ/rRBKrN5ufmorCwcFBTNbFIhIKsLBRmZYHDkBLxA2KttdnQ5W9wNl6hSqCPRyRjMhYfz6Oqthanzp2Dz+sdsVCRUqHAnGnTUDRkRq61owNHKyrQ0tYmaDvFIhEK/AlTOD2CwhXo0dPQ2Iim5uak/CWe7EQiEdQaDTY88QT+84c/HLOa8kCUZIxfSiQZDQ0NWLRoEUwmE/70pz8NSjDy/OWmwxHJB4Yxhvd378bjDzyABrN53E1oJBJJf0+S3FwA4f/KYYyhrb0dtWZzXOuD5Or1MBYVQewvkz1WfBzHoa29HXUWC+Rpabj04ouRm5MTMolijMHpduN4RQVqIyx6FIl0uRwmoxFZmZnQqlRQ+yuthooVADp7e9HhcKC1rS28MfEnEGqVCiajEWlpaTBbLGgN80AmFolQVFiIvNxc5Gu1MOp0kAzpHzJSrBzHoa2nB7U2W9gNw4by+XyCmrmNRyRjMhBjDJamJhw/cwaOEMlVsJ+IVos506cjXSbD8bNnYW5sFJxE5ep0MBgMwXLyscAYg8frRZ3ZjJYQM8Ckn1gigUgkwp0//SnufvBBqAUefOOVZLy6dm1UkoxbX3wx6ZKMlLi75OOPP0Z1dTWqq6tRNKQqZqxzJI7jcON3voPrli7Fzq1bsWXTJnRHOE2sVCpx8UUXQRTi4DAUYwxnKivjWp1TJBLhkosvRnqYJZgDz9FmZsJUUIAs/8zFwH8ba1m5TIZZF12ExjiWOO9zuWBrbsYlZWXDGn6NJvCcjPR0HD11Kvzz9f7PaY/DgfKKikGvFc5n2Of/JXvNnDnQZmQIGxOlEs7MTNRG0PjO7XbjZHk5PHGaqu9zudAscEwCGGPYd+gQrP6ZlnCeD/TPXHz82WcAhI0J0F+B9JIZM8LeT8aD4zhI/V2ZOzo6hjUGJMN9+5ZbsOGJJ1CQ5Bf9T+Sy4ilxd8ltt92W8AtdpFIp1qxfj89qaqD0N3cSKkOtFpxgAP1fePEu/y2TSqFITxccK8dxUMhk4DhuUFfMkMsBaOvsjG8PFcagH6GjaLgiuSBw4GdW6Oc3Q6lElkYT0Zi0CWhHPlCPwxG3BANA/5hkZUU0JowxWP2JlJD3djxjIpXJItpPxsPhcFCCEYant2/HlldfTfoEY6JLiZmMZKLRaqFQKuGI0UV1E0HydQYYm5Bz/SkrCfs1jGVSjAmJqbKpUxMdQtgmcjGulJjJIIQQQiYqhijcxjqO9T/11FPgOA7r16+P0hb9GyUZhBBCyCR1+PBhvPTSS5g5c2ZMXp+SDEIIISSBeMai8hCqp6cHK1euxMsvvwytVhuDLaMkgxBCCEkoFqUH0H9b7MDHwAJ/Q61btw7/8R//geuuuy4m2wVQkkEIIYRMGAaDYVDPrs2bN4/4vDfeeANHjx4d9d+jhe4uEajqzJmI62RMFsl5jfPoJsNdDFySXnk+mskwJiS2Ptu7F3MXLIjr7cWRiubdJRaLZVAxLtkIRb4sFgt+8pOf4OOPPx6zbUE00ExGmOzNzXh47VpcP2MGXE5nRK/R1t4Ol8sl+MMkEomQE6KtfbT1OZ1oa28HILzmQEdPD7w+n6BzhMxfs0Lpr/AYDxzHod5qhdPtFraN6B8TU2Fh7IIbQXt3N6rMZgAQ/N7qNJqI1pmhViNDpYpo2UBlXqFf8vXNzejp7RV0xXwixoTjODidzogaxTHG4PP5wPO84P1LnZEx4oGDDLZl0yYsveIKHP7000SHElI0G6RlZGQMeoz0WTly5AhsNhsuvfRSSCQSSCQS7N+/H7/97W8hkUii2rKCZjJC6OvtxcvPPYcXnnwSHrd7XH0DXC4Xjp86Bb1OF3ap7mAZ4TEakMVKZVUVMtRqlJhMUCgUYz438CFvtFrR2NQU7Lh6QXExAIxamCtQ+rq1owNHT58OWQo6GgIlozM1GpgMBjR3dkKdno5MpRKiED0nBpZAr4tjCfTAuv93/34Y8vKweO5c6EL0vQkcpBvb2tAQwedHlpaGPK0WZfn5sDQ14diZM+gNY3wGlkB3ezyCyqcDgKO3F3/btw9lRiNmTp0KaVpaUo6JTCZDsdEItYAkLLCfNFmtaGhqAsdxgtoM9DgcqK2rG/M8O/m3imPHsHzhQly/bBkefuYZlFxwQaJDGlk0iksKWP7aa6/FqVOnBv3t9ttvx0UXXYQHH3wwot5go0mJ3iXRIqQOvc/nw+6dO/HUxo1otdmiXuhELBb3N1MaoelYoCFSfWMjrFZrzPtFhCMnO7u/54ZEMixWjuNgb2mBub5+WA8PtVKJ2f4mVAMPiKx/YTj6+nCsogL1cewmq1QoUGw0DvsMcBwHjUIBjT+hGridvH9MTldVofKrr+LWzG0s00pK8PXLLoNiSEnrwPts6+qC2W4fs3PsSCRiMbRKZbBya4DP50NVXV1/0zGfb9A+MaiZW0HBsAZU3T09qDOb+xvoDWkEN2YsEgmml5XhorKyYVVkEzUmozVzG0uo/UQuk/X3bBkhcWSMwe12o9ZsDs4uEmHEEgkYY7j1Rz/CTx59FFn+DrmhxKt3ye/XrEG6v9t4pPrcbtz5hz9EHOuiRYswe/ZsPP/88+OKYyhKMkbg9Xpx84IFOHHoUNS7TQ4llUph9LeFDqwnWVs7izgOeXl5KCooCJZH7+ruRm1dHRwh2mHrsrJw6cUXI0ujCc7QnKysxPm6urglUVKpFCaDAdlZWWMeHMQiEbRKJVTp6cExqfa3pXfGsTldOCRiMS6dNg1XXXJJsDlXV28vamw2OAT+2uU4DlqlEuoQZbJd/vbp52pqgu9POG3pR2tpHw6FXI6ZU6eieEDvoniPCcdxKMjPR2GItvQDBRKGru5u1JrNcDgcYz5frVKhxGSCUqkMnlKxNDSgOQY/dCYjkVgMeXo6/vzJJ5g5d27I58cryXjxv/4rKknG2j/+kZKMRAr3A2OzWnF5fn4cI+v/dZ2l1cLe2gpnhNd8xItEIkGuXg9Hby86OjoELWvMz4dSoUB1XV3cemLodTooFArk6nQQicK/DMnjcsHldKKuoQFdEfb+iJd0uRw3fv3r6HO70R7iQDaUQiaDVCKBOj0dYgHvT2dPD06cOwetRgO1gH4+PM+jvKIiZGI6Em1GBory8+M6JpqMDKhVKuj1esgEHggsDQ1wOBxoF7ifZGdlQSaTodlmi+r5cdJ/7c5DzzyDOx94IORz45VkbLv99qgkGXfv2EFdWMnIHL29EX3pJoLX60VDY2NEy5qbmqIcTWiajAzkZGcLXq7P7cbpysoYRBR9fU4nLC0tEZ1LlUok0CgUgi/QVCkUMA7pihwOkUgEuVwe0ee9vasL7XFuFiiVSmGIYDsBoLGpKaLruFoTcA3WZJEKd5tMJJRkEEIIIQk0kVu9U5JBCCGEJBB1YSWEEEIIEYhmMgghhJAEirTB2dDXSEaUZBBCCCEJRKdLCElh9pYWfFVbO6wA0lgYY+iM810M41X91VcR3c3gdLvR0tUluGhXc0sLKquqYLPbBX3BeTyeuN9JJZNKUVpcDIO/0q4QfX19OFddjW6B5cMdDse4KgST2KAxiS+ayRiBLjcXN69ahd07d0IsFtN96imuw9/Qzma3ozA/HwUhiimFWzgp2bS1t6OtvR1Nzc1hFR0LcHo8AACHywWVXA6tSjVmvYzO7m4cq6hAk90eXG+T1QqT0YjMMXqk+HgeVqsV9Y2NcfuiF4vFwbLdgfciT68XVOCqx+FAj8OB1ra2sIqOudxumC0WtLS2Rm07SPQYS0txw7JliQ5jkIk8k0HFuMZw5PPP8av77sPxgwchEokoA54gRisL3ed0wmyxoK29PeaVXuNhtPLpoXAANEolMhSKQWW8+5xOnDp3DufN5mHvz9B+MAN73TDG0NLaijqLBR5/QhNrHMchV6/vn7nwV6cdiDEGl9uNOoGlugeVTy8sRJrk37/TvD4fGpua0OivBZPqn5+JRCQSQa3RYMMTT+A/f/jDYWXvRxOvYlzP/+AHUSnGtf6115KuGBclGSEwxvD+7t14/IEH0GA2C2pCQ5JbulwOk9EIpUKBhqYmWJubJ0RyERDYFm1mJkwGA9IFdrgNlFeXSSSorKlBRXU1+BC/uALr1Ot0MBQWos/pRK3ZjN44nh7J0mpRbDRCKpWGNZPT3dOD2ro69AicuQo0gsvV62FvbYWlvj7pWgFMdmKJBCKRCHf+9Ke4+8EHoRZ48I1XkvFclJKM+5MwyaDTJSFwHIcbv/MdXLd0KXZu3Yotmzah2z/9TlJbn8uFs+fODfrbREkwgH9vS0dnZ7BjqJBqhz6eR2NrK06ePh32DERgnTa7HTb/6ZR4Vli86MILoc3MFLSMSqlEYUEBKquqBC3n43nUWSwwWyxJWwhpsvv2LbdgwxNPoMBgSHQokxZd+BkmqVSKNevX47OaGigF9GkgSWwCJRRjYYwhKzMzooN9j8Mx7lMc8UzchCYYQH8S1DGOHw6T41OUep7evh1bXn01JRKMwDUZ430kI5rJEEij1UKhVMIh8EpzQhKK+jWENJFOlRGgbOrURIcQtol84SfNZBBCCCEkJmgmgxBCCEkgqvhJCCGEkJig0yWEEEIIIQLRTAYhhBCSSNG4O4RmMiaGqjNnqE4GSTnJOpWaTOg9mlg+27s3ZcY0cE3GeB/JiJKMMNmbm/Hw2rW4fsYMuJzORIdDiCDNNht8Pp+gL13GGDLUashkshhGFl2NVqvg89uMsbD7vJDUsWXTJiy94goc/vTTRIcyqVGSEUJfby9++/jjuLqkBG9s3w6e51MmOyYkoK29HUdPnIC1uTnsg3CPw4EzlZVwuVxxiDA66sxmnCwvR5e/js1YWxl4H2x2O6rOn6f9egKqOHYMyxcuxB033YQagRVd44khCgW5Er0Ro6AkYxQ+nw9/eeUVXF1aiucefRTOvj7qxkpSmtfrRa3ZjOOnTqG9owPA8FMEjDG4XC5UVlWhvKJCcD+PZNDb14eKs2dxprISzhFmHQNb3NnVhZPl5fiqtjZujdtIfAW+s/e+9x6umTYNj917L9paWhIc1XBU8XOS8Xq9uHnBApw4dIiqAJIJx+l0orKqCmqVCiUmE5RKJRhj8Pl8glqgJ7uOzk4cP3kSep0OxqIiSCQScByHvr4+1NbVobOrK9Ehkjjx+RvXvbp1K97csQN//uQTzJw7N8FR/RvVyZhk2lpacOLQIQB0MRiZuLp7enDy9GlkZ2VBJpMFr9uYaGx2O1paW5Gr18Pj8aCltTXRIZEE4X0+OHt78cX+/UmVZExklGQQMsm1trUlOoSY43keTVZrosMgSSAZL/CdyMW4KMkghBBCEmginy6hCz8JIYQQEhM0k0EIIYQk0EQ+XZIyMxnf+ta3YDQaIZfLkZ+fj1WrVqGxsTHRYRFCCCHjQhU/k8DixYvx5ptvorKyEm+//TbOnz+P5cuXJzosQgghhIwiZU6X3HfffcH/bzKZsHHjRixbtgwejwdpaWkJjIyQxFMoFCjIy4OjtzdY1ZMQMhzP84kOYZiJfLokZZKMgdra2vD6669j/vz5YyYYLpdrUEnkrjCL7+hyc3HzqlXYvXMnxGLxhKwdQCYGaVoaDAYDdNnZAICc7GwU5OWh1myeFLemEiKUsbQUNyxblugwBqG7S5LEgw8+CKVSiezsbJjNZuzZs2fM52/evBkajSb4MBgMYa2H4zhsefVV7D5wAJf4C7aIRCn1VpEJTiwSwVBYiDmzZkGXnQ2O44IPqVSKC6dMwcyLL4ZarU50qIQknEgkgkarxeNbt2LvmTMwlZUlOqRJI6FHzo0bNw76chzpcfbs2eDzN2zYgGPHjuGjjz6CWCzGrbfeOuYU0UMPPYTOzs7gw2KxCIrvsnnz8O7nn2PbW28h32AAkrCIC5l8cnU6zJk9G4UFBRCJRKMWF1IoFJgxbRqmXnAB5HJ5nKMkJPHEEgnSpFLcvXEjPqutxaq7707K0+sTuXcJxxIYmd1uR2uIEr+lpaWQSqXD/l5fXw+DwYADBw5g3rx5Ya2vq6sLGo0GnZ2dyMjIEBSr2+3Gzq1bsWXTJnR3dgpalpBoEHEcLpkxA+lyuaCqhYwxNFmtqBOYZBOS6m5etQobnngCBWHOYg81nmOGkNff+M1vQjbO5Mfl8eCp996LWayRSug1GTqdDjqdLqJlAxfvxKsNtVQqxZr167F89WrMM5ng8LeSJiReZDIZFOnpgpfjOC7YdZWQyeLp7dvxn2vWJDqMsNCFnwl28OBBHD58GFdffTW0Wi3Onz+PRx55BGVlZWHPYkSLRquFQqmkJIOkFjrVRyaZsqlTEx0CQYpc+KlQKLB7925ce+21mDp1KtasWYOZM2di//79kMlkiQ6PEEIIidhELsaVEjMZl1xyCf7xj38kOgxCCCEk6hJxumTz5s3YvXs3zp49i/T0dMyfPx9PP/00pkZ5BiglZjIIIYQQEj379+/HunXr8MUXX+Djjz+Gx+PB9ddfD4fDEdX1pMRMBiGEEDJRJaIY1wcffDDov1955RXo9XocOXIEX/va18YVy0CUZBBCCCEJFM0kY2hla5lMFta1i53+0gxZWVnjimMoOl0iUNWZM1Qng6SeJL0ojJBY+Wzv3qS9rTOWDAbDoErXmzdvDrkMz/NYv349FixYgBkzZkQ1HkoywmRvbsbDa9fi+hkz4HI6Ex0OSXHiCMrU9zmdwX4kQr48GWPQ5eQIXh8hqWzLpk1YesUVOPzpp4kOJaRoVvy0WCyDKl0/9NBDIde/bt06lJeX44033oj6ttHpkhD6envx8nPP4YUnn4TH7U7KDn4k+XEcB8YY9Dk5MBQVQSwWo8lqRUNjo6Bp0nPV1chQq1FiMkGhUIz53MAXT5PVioampvFuAiEpp+LYMSxfuBDXL1uGh595BiUXXJDokEYUzdMlGRkZgip+3nPPPXjvvffwz3/+E0VFReOKYSQ0kzEKn8+Hv7zyCq4uLcVzjz4KZ18fdWMlggXKf2dkZGDmjBko85fJF4vFKPI3ONP7q96GWyq8q7sbJ8rLUXX+PNwez7BZjcB/t7S24tjJkzDX19Nnl0xKgc/93vfewzXTpuGxe+9FW0tLgqNKDowx3HPPPXjnnXfwj3/8AyUlJTFZD81kjMDr9eLmBQtw4tCh4C9QQiIhl8tRbDQiU6MZ8d+lUinKSkqQn5uLOosFHQKu92lpbUVbWxvy8vJQNKBZWndPD2rr6uDo7Y3WZhCS0nxeLwDg1a1b8eaOHfjzJ59gpr/DdjJIxN0l69atw65du7Bnzx6o1WpYrVYAgEajQXoE7QtGQ0nGCNpaWnDi0CEAyVsPniS3/Lw8KBUK5PjbsIeiUCgwbepU1JrNaPLv7OHgGUNjUxNsdjty9Xr09vZSnxJCRsH7fHD29uKL/fuTKslgjIGN81S80GPVtm3bAACLFi0a9PcdO3bgtttuG1csA1GSQUgM6HW6iJqZRbIM0D/71tDYGNGyhEwmQjoYx0siZjLi9QOarskghBBCSEzQTAYhhBCSQCwKMxnJemqfkgxCCCEkgRJxuiRe6HQJIYQQQmKCZjIIIYSQBOJ5ftyFHpO1UCQlGYTEgKW+HulyOQry8yGRhLeb8TyPziHNjQgh0ZWMB+OBZcHH8xrJiE6XjECXm4ubV60CAIjF4gRHQ1JRW3s7GpqacPTECTRZrWN+sTHG0NbejuOnTqGltTWOURIy+RhLS3HDsmWJDmPSoCRjBBzHYcurr2L3gQO4xF+wRRRBQytCfD4fas1mHD91Cq1tbcN+bfT09OD02bOorKqCy+1OUJSETGwikQgarRaPb92KvWfOwFRWluiQBglc+DneRzKi0yVjuGzePLz7+ed4f/duPP7AA2gwm6llNomIy+3GuepqqFUqmIxGpKWlwWyxoLWt7d/FgeizRUhUiSUSiEQi3PnTn+LuBx+EWkDjsHiayNdk0M/zEDiOw43f+Q72nTuHR597DupRelAQMiZ/AtHjcKC8ogLHTpxAW3u7/58ouSAkFr59yy34Z3U1fvbEE0mbYEx0lGSESSqVYs369fispgZKtTrR4ZAUNTChoOSCkNh5evt2bHn1VRQYDIkOJSQ6XUKCNFotFEolHN3diQ6FEELIKMqmTk10CGGbyMW4KMkghBBCEoiuySCEEEIIEYhmMgghhJAE4hmDj06XEEIIISTa6HQJIYQQQohAlGQIVHXmDLo7OxMdBiGEkDF8tndvytwmziMKt7EmeiNGQUlGmOzNzXh47VpcP2MGXE5nosMhJOYClUjDbfBGSDLZsmkTll5xBQ5/+mmiQwkpcLpkvI9kRElGCH29vfjt44/j6pISvLF9O3ieT5nsmJBIBJILpVKJGdOnY+6cObhwyhRIpdIER0aIMBXHjmH5woW446abUFNVlehwJiVKMkbh8/nwl1dewdWlpXju0Ufh7OuDz+dLdFiExJxUKsWFU6ZgxrRpUKtU4DgO2VlZmDNzJkxGI3UmJikj8J299733cM20aXjs3nvR1tKS4KiG8/F8VB7JiOZBR+D1enHzggU4cegQOI6jmQsyKYjFYhgKC5Gr14/YdVgkEqEgLw+6nBw0NDaiyWpNQJSECOfzegEAr27dijd37MCfP/kEM/0dtpPBRK74STMZI2hracGJQ4cAUH8JMvFla7UwFBXh0lmzkJ+XN2KCMVCaRIJioxGXTJ8epwgJiQ7e54Oztxdf7N+f6FAmDZrJIGSSUygUKMzP/3fL+TDJZLIYRURI7Aj9nMeDj+chGmdcdLqEEEIIIcPwPA9+nElGst5dQkkGIYQQkkA8z8M3QZMMuiaDEEIIITFBMxmEEEJIAvl4ftzXitA1GYQQQggZZiInGXS6hBBCyKSRrNcuTFQpl2S4XC7Mnj0bHMfh+PHjMVmHLjcXN69aBQCCqhuKxGLI5HKkKxQhaw0MFFhHVk5O/+sIWJbjOKjUaqRJpYJiFfv7UWizs4OvI0RmVhY4kSj4OuGuUyyRQK3RCFpf4P3Q+t+feIyJaJxjooxkTPzPHc+YiISOiViMjs5OyJVKQMD6OJEIEokEpWVlwdcJV2BMFEplRGOijeeYjHM/0Wi1wsdEIoFYLEZGZmbc9xOhYyIeOiYC1smJRAkZE2NpKW5YtkzQMrFGvUuSyM9+9jMUFBTEdB0cx2HLq69i94EDuMRfFW6sHU8skUAkFuO2e+7Bwfp6HGxowF0bNkCSljbml0tg55g6Ywbe+OQTHLXZ8Mf33oPJ/8U9FrFYDHl6Ou7/1a/wpdWKz2pq8J3Vq8Fx3JjrDHwJzFu0CB+cOIEjzc34zSuvIFuvD7mzikQiZGZl4Ylt23CkuRn/d/o0Fi1ZEoxn1Fj98fzHihXYX1WFL61WPPTMM1CoVKG/lDgOeUVF2PqXv+CYzSZ4TFavW4eD9fU41NgoaEwuGmVMxnqPxP4v6vt/9St82dSEz2pqsFzAmFy1aBHeP35c8JhotNrgmHx8+jQWf+MbwXhGjTUwJt/9Lt4/dQrbP/wQP/jxjyEPMxnL1utx3+bN+EdVFd75/HPMvPxyAP0HjrHWGRiTLywWHGxowNqf/UzQfvI///gHjtls2PG3v8E0Zcqgfx9xnf4xue+XvwyOyYrbbgs9Jv7tuHLhQrx//DiO2myCx+TxrVv795OKCkFjcuPy5dhfXY0vrVY8/OtfQ6lWh7+fvPkmjtlsg8Yk3P0kkjG58OKLB4+JgP3kvk2b+sektjbiMXnuT38SPCZ7z5wJ6zs2nrw8D6/PN75HkiYZYCnk73//O7vooovY6dOnGQB27NgxQct3dnYyAKyzszPsZXieZ3976y02z2RiRo5jRiD4KBGLmRFgd9x0E/vq3Llhy1pqa9k9t9wy6LmBh4nj2OUFBWz3a68xn883aDmPx8Nee/FFNjMrixWLRIPXKZEwE8exjXfeyZqbmoats+LECfb9665jRoAVD1inyR/74osuYvs++GDYcr0OB/vt44+zC9PTh8VaIhazMqmUPfPzn7OuEd67A598wpbMmjVoPUYgGPvNCxaw44cODVuuraWFbfrJT1ixWMxKJJJB6ywWidj0jAy2fcsW5nK5ojomP/7+94Pv5dAxmZufPyHG5PN9+9iS2bNHHZOb5s8fcUy6OjrYK889x26ZN4/dMm8e+94VVwQf/3nVVey2xYvZ33btYu4RxuTvb7/N5hcXjz4my5aNOib3rlw55pi8vXPniGPy+ksvsZlZWcw0ypg8eMcdI47JmZMn2crrrx+2bwbeq0VTp7JP3n+f8Twf/phIJKxMKmVPP/zwqGPyjTlzxhyTYwcPDluuraWF/XL9elYikYy6n7z83HPM6XRGbUzq6+rGNSazsrPjOia/e+KJiMYklEiOGZG8/lXFxezq0tJxPa4qLo5prJFKmSTDarWywsJCdvjwYVZTUxO3JCPA5XKx7Vu2sIs1muCH/ptz57JDn34actkThw+zmxcsCO4wFymVbOtTT7G+3t4xl+vu6mK//sUv2BSZLLjOW7/xDVZ5+nTIde774AN2zbRpwXXO0enY/2zfzrxe75jL2axW9tBddzETxwUf9916K2u0WMZczufzsd2vvcYuLygIxnp1aSn78N13h30pDPXVuXPsjptuCsZaKpGw/37gAdbR1jbmci6Xi/3h+ecjHpPvXH119MakvDzkOoeOyeycHEFjUiwSDRqTBrN5zOV8Ph975/XXIxqTJrOZ/ebBB/uTiyuvZN+fN4+9+vzzrDvEvuNyudgf/9//GzQmN152GTv0r3+NuRxjw8dkqkLBXti8OawxefaRRwaNyaolS8Iak/0ffsiunT590Jjsevll5vF4xlxupDFZv2pVRGOyoKSEffDOOyHHpKaqit15883BWEskEvar++8Paz+JdExOfvklW75wYcqMycNr1wbHxAiENSZjiVeScbnBwOaZTON6XG4wJGWSwTGW/M05GGO48cYbsWDBAvziF79AbW0tSkpKcOzYMcyePXvU5VwuF1wuV/C/u7q6YDAY0NnZiYyMjIhi6Wxvx+svvQRTWRluXL487POBjDH831//ijMnT2LlXXchW6cLe51N9fV4Y/t2XL5wIa6+9tqwl/P5fHjntdfQ3tqK7995J5QqVdjLnquowLuvv44bly/HjDlzwl7O2deH/9m+HXK5HMtvuw1paWlhL3v4s8+w/4MP8N3bb4extDTs5QJjYiwtxX+sWDFhx6TqzBm8+/rr+MZ3viNsTJxO/M/LL0Mmk2HF7bcLGpPKkydx/MABLFq6FLmFhWEv19nRgddffDGiMdn73nuoOHFC8JhYGxrwPy+/jMuvvhpXX3dd2Mv5fD68+/rraLXbsfKuuyIakyU334xLLr007OWc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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "races.plot.density()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "gHw8m7CRtmyY",
        "outputId": "69753341-b76c-4baf-9875-8f0e493c3d0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 96
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "twv2s0WduBXZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}